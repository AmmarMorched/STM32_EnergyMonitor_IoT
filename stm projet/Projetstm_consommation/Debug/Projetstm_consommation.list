
Projetstm_consommation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006064  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800631c  0800631c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006324  08006324  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800632c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000002d4  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000034c  2000034c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e6cb  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000244b  00000000  00000000  0002e7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d10  00000000  00000000  00030c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a25  00000000  00000000  00031918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002eab  00000000  00000000  0003233d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000107d5  00000000  00000000  000351e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3bab  00000000  00000000  000459bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ee0  00000000  00000000  00119568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0011d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061dc 	.word	0x080061dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080061dc 	.word	0x080061dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000586:	4a38      	ldr	r2, [pc, #224]	; (8000668 <HD44780_Init+0xec>)
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800058c:	4b37      	ldr	r3, [pc, #220]	; (800066c <HD44780_Init+0xf0>)
 800058e:	2208      	movs	r2, #8
 8000590:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000592:	4b37      	ldr	r3, [pc, #220]	; (8000670 <HD44780_Init+0xf4>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000598:	4b33      	ldr	r3, [pc, #204]	; (8000668 <HD44780_Init+0xec>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d907      	bls.n	80005b0 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80005a0:	4b33      	ldr	r3, [pc, #204]	; (8000670 <HD44780_Init+0xf4>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <HD44780_Init+0xf4>)
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e006      	b.n	80005be <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80005b0:	4b2f      	ldr	r3, [pc, #188]	; (8000670 <HD44780_Init+0xf4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b2d      	ldr	r3, [pc, #180]	; (8000670 <HD44780_Init+0xf4>)
 80005bc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80005be:	f000 f985 	bl	80008cc <DelayInit>
  HAL_Delay(50);
 80005c2:	2032      	movs	r0, #50	; 0x32
 80005c4:	f000 ffd0 	bl	8001568 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <HD44780_Init+0xf0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f943 	bl	8000858 <ExpanderWrite>
  HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f000 ffc7 	bl	8001568 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f000 f92b 	bl	8000836 <Write4Bits>
  DelayUS(4500);
 80005e0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005e4:	f000 f99c 	bl	8000920 <DelayUS>

  Write4Bits(0x03 << 4);
 80005e8:	2030      	movs	r0, #48	; 0x30
 80005ea:	f000 f924 	bl	8000836 <Write4Bits>
  DelayUS(4500);
 80005ee:	f241 1094 	movw	r0, #4500	; 0x1194
 80005f2:	f000 f995 	bl	8000920 <DelayUS>

  Write4Bits(0x03 << 4);
 80005f6:	2030      	movs	r0, #48	; 0x30
 80005f8:	f000 f91d 	bl	8000836 <Write4Bits>
  DelayUS(4500);
 80005fc:	f241 1094 	movw	r0, #4500	; 0x1194
 8000600:	f000 f98e 	bl	8000920 <DelayUS>

  Write4Bits(0x02 << 4);
 8000604:	2020      	movs	r0, #32
 8000606:	f000 f916 	bl	8000836 <Write4Bits>
  DelayUS(100);
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f000 f988 	bl	8000920 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000610:	4b17      	ldr	r3, [pc, #92]	; (8000670 <HD44780_Init+0xf4>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f043 0320 	orr.w	r3, r3, #32
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f000 f8ce 	bl	80007bc <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <HD44780_Init+0xf8>)
 8000622:	2204      	movs	r2, #4
 8000624:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000626:	f000 f875 	bl	8000714 <HD44780_Display>
  HD44780_Clear();
 800062a:	f000 f82b 	bl	8000684 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HD44780_Init+0xfc>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HD44780_Init+0xfc>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4618      	mov	r0, r3
 8000640:	f000 f8bc 	bl	80007bc <SendCommand>
  DelayUS(4500);
 8000644:	f241 1094 	movw	r0, #4500	; 0x1194
 8000648:	f000 f96a 	bl	8000920 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800064c:	490b      	ldr	r1, [pc, #44]	; (800067c <HD44780_Init+0x100>)
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f876 	bl	8000740 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000654:	490a      	ldr	r1, [pc, #40]	; (8000680 <HD44780_Init+0x104>)
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f872 	bl	8000740 <HD44780_CreateSpecialChar>

  HD44780_Home();
 800065c:	f000 f81d 	bl	800069a <HD44780_Home>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000097 	.word	0x20000097
 800066c:	20000098 	.word	0x20000098
 8000670:	20000094 	.word	0x20000094
 8000674:	20000095 	.word	0x20000095
 8000678:	20000096 	.word	0x20000096
 800067c:	20000000 	.word	0x20000000
 8000680:	20000008 	.word	0x20000008

08000684 <HD44780_Clear>:

void HD44780_Clear()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 f897 	bl	80007bc <SendCommand>
  DelayUS(2000);
 800068e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000692:	f000 f945 	bl	8000920 <DelayUS>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}

0800069a <HD44780_Home>:

void HD44780_Home()
{
 800069a:	b580      	push	{r7, lr}
 800069c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f88c 	bl	80007bc <SendCommand>
  DelayUS(2000);
 80006a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006a8:	f000 f93a 	bl	8000920 <DelayUS>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HD44780_SetCursor+0x5c>)
 80006c2:	f107 0408 	add.w	r4, r7, #8
 80006c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HD44780_SetCursor+0x60>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	79ba      	ldrb	r2, [r7, #6]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d303      	bcc.n	80006de <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HD44780_SetCursor+0x60>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	3318      	adds	r3, #24
 80006e4:	443b      	add	r3, r7
 80006e6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4413      	add	r3, r2
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 f85d 	bl	80007bc <SendCommand>
}
 8000702:	bf00      	nop
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	bf00      	nop
 800070c:	080061f4 	.word	0x080061f4
 8000710:	20000097 	.word	0x20000097

08000714 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HD44780_Display+0x28>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	f043 0304 	orr.w	r3, r3, #4
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HD44780_Display+0x28>)
 8000724:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HD44780_Display+0x28>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	f043 0308 	orr.w	r3, r3, #8
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f843 	bl	80007bc <SendCommand>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000095 	.word	0x20000095

08000740 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	00db      	lsls	r3, r3, #3
 8000758:	b25b      	sxtb	r3, r3
 800075a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075e:	b25b      	sxtb	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f82a 	bl	80007bc <SendCommand>
  for (int i=0; i<8; i++)
 8000768:	2300      	movs	r3, #0
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	e009      	b.n	8000782 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	683a      	ldr	r2, [r7, #0]
 8000772:	4413      	add	r3, r2
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f82e 	bl	80007d8 <SendChar>
  for (int i=0; i<8; i++)
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	2b07      	cmp	r3, #7
 8000786:	ddf2      	ble.n	800076e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800079a:	e006      	b.n	80007aa <HD44780_PrintStr+0x18>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	607a      	str	r2, [r7, #4]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f817 	bl	80007d8 <SendChar>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f4      	bne.n	800079c <HD44780_PrintStr+0xa>
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f812 	bl	80007f4 <Send>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2101      	movs	r1, #1
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f804 	bl	80007f4 <Send>
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	460a      	mov	r2, r1
 80007fe:	71fb      	strb	r3, [r7, #7]
 8000800:	4613      	mov	r3, r2
 8000802:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f023 030f 	bic.w	r3, r3, #15
 800080a:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	011b      	lsls	r3, r3, #4
 8000810:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000812:	7bfa      	ldrb	r2, [r7, #15]
 8000814:	79bb      	ldrb	r3, [r7, #6]
 8000816:	4313      	orrs	r3, r2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f80b 	bl	8000836 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000820:	7bba      	ldrb	r2, [r7, #14]
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4313      	orrs	r3, r2
 8000826:	b2db      	uxtb	r3, r3
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f804 	bl	8000836 <Write4Bits>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f808 	bl	8000858 <ExpanderWrite>
  PulseEnable(value);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f820 	bl	8000890 <PulseEnable>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b086      	sub	sp, #24
 800085c:	af02      	add	r7, sp, #8
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <ExpanderWrite+0x30>)
 8000864:	781a      	ldrb	r2, [r3, #0]
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4313      	orrs	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800086e:	f107 020f 	add.w	r2, r7, #15
 8000872:	230a      	movs	r3, #10
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2301      	movs	r3, #1
 8000878:	214e      	movs	r1, #78	; 0x4e
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <ExpanderWrite+0x34>)
 800087c:	f002 fbea 	bl	8003054 <HAL_I2C_Master_Transmit>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000098 	.word	0x20000098
 800088c:	20000144 	.word	0x20000144

08000890 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffd8 	bl	8000858 <ExpanderWrite>
  DelayUS(20);
 80008a8:	2014      	movs	r0, #20
 80008aa:	f000 f839 	bl	8000920 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	f023 0304 	bic.w	r3, r3, #4
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff ffce 	bl	8000858 <ExpanderWrite>
  DelayUS(20);
 80008bc:	2014      	movs	r0, #20
 80008be:	f000 f82f 	bl	8000920 <DelayUS>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <DelayInit>:

static void DelayInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <DelayInit+0x4c>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	4a10      	ldr	r2, [pc, #64]	; (8000918 <DelayInit+0x4c>)
 80008d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008da:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <DelayInit+0x4c>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <DelayInit+0x4c>)
 80008e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008e6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <DelayInit+0x50>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0b      	ldr	r2, [pc, #44]	; (800091c <DelayInit+0x50>)
 80008ee:	f023 0301 	bic.w	r3, r3, #1
 80008f2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <DelayInit+0x50>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a08      	ldr	r2, [pc, #32]	; (800091c <DelayInit+0x50>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <DelayInit+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000906:	bf00      	nop
  __ASM volatile ("NOP");
 8000908:	bf00      	nop
  __ASM volatile ("NOP");
 800090a:	bf00      	nop
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000edf0 	.word	0xe000edf0
 800091c:	e0001000 	.word	0xe0001000

08000920 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <DelayUS+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <DelayUS+0x48>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9a      	lsrs	r2, r3, #18
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	fb02 f303 	mul.w	r3, r2, r3
 800093a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <DelayUS+0x4c>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <DelayUS+0x4c>)
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	697a      	ldr	r2, [r7, #20]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f6      	bhi.n	8000942 <DelayUS+0x22>
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000010 	.word	0x20000010
 8000968:	431bde83 	.word	0x431bde83
 800096c:	e0001000 	.word	0xe0001000

08000970 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PTD */
/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
uint8_t convCompleted=0;
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
     convCompleted=1;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_ADC_ConvCpltCallback+0x1c>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000099 	.word	0x20000099

08000990 <sendATCommand>:
  */
uint8_t count = 0;
uint16_t Value_Buf [4];


void sendATCommand(const char* command) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff fc19 	bl	80001d0 <strlen>
 800099e:	4603      	mov	r3, r0
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	6879      	ldr	r1, [r7, #4]
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <sendATCommand+0x28>)
 80009aa:	f003 fb40 	bl	800402e <HAL_UART_Transmit>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000198 	.word	0x20000198

080009bc <configureWiFi>:
void configureWiFi(const char* ssid, const char* password) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
    char command[50];
    sprintf(command, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 80009c6:	f107 000c 	add.w	r0, r7, #12
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	687a      	ldr	r2, [r7, #4]
 80009ce:	4906      	ldr	r1, [pc, #24]	; (80009e8 <configureWiFi+0x2c>)
 80009d0:	f004 fbc8 	bl	8005164 <siprintf>
    sendATCommand(command);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffd9 	bl	8000990 <sendATCommand>
}
 80009de:	bf00      	nop
 80009e0:	3740      	adds	r7, #64	; 0x40
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	08006204 	.word	0x08006204

080009ec <sendDataToThingSpeak>:

void sendDataToThingSpeak(const char* apiKey, const char* data) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b09c      	sub	sp, #112	; 0x70
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
    char httpPost[100];
    sprintf(httpPost, "GET /update?api_key=%s&field1=%s\r\n", apiKey, data);
 80009f6:	f107 000c 	add.w	r0, r7, #12
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	4909      	ldr	r1, [pc, #36]	; (8000a24 <sendDataToThingSpeak+0x38>)
 8000a00:	f004 fbb0 	bl	8005164 <siprintf>
    sendATCommand("AT+CIPSEND=0,"); // Open a TCP connection
 8000a04:	4808      	ldr	r0, [pc, #32]	; (8000a28 <sendDataToThingSpeak+0x3c>)
 8000a06:	f7ff ffc3 	bl	8000990 <sendATCommand>
    HAL_Delay(1000);
 8000a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a0e:	f000 fdab 	bl	8001568 <HAL_Delay>
    sendATCommand(httpPost); // Send data
 8000a12:	f107 030c 	add.w	r3, r7, #12
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff ffba 	bl	8000990 <sendATCommand>
}
 8000a1c:	bf00      	nop
 8000a1e:	3770      	adds	r7, #112	; 0x70
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	0800621c 	.word	0x0800621c
 8000a28:	08006240 	.word	0x08006240

08000a2c <main>:

// Function to send data to ThingSpeak
int main(void)
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b08c      	sub	sp, #48	; 0x30
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */
	   // Assuming val1 is declared somewhere in your code
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fd27 	bl	8001484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f8e7 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f000 fa25 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a3e:	f000 fa03 	bl	8000e48 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a42:	f000 f949 	bl	8000cd8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000a46:	f000 f9a7 	bl	8000d98 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000a4a:	f000 f9d3 	bl	8000df4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fd94 	bl	800057c <HD44780_Init>
  HD44780_Clear();
 8000a54:	f7ff fe16 	bl	8000684 <HD44780_Clear>

   HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 2);
 8000a58:	2202      	movs	r2, #2
 8000a5a:	4944      	ldr	r1, [pc, #272]	; (8000b6c <main+0x140>)
 8000a5c:	4844      	ldr	r0, [pc, #272]	; (8000b70 <main+0x144>)
 8000a5e:	f000 fefb 	bl	8001858 <HAL_ADC_Start_DMA>
   // ESP8266_Init();
// ESP_Init("laptopwiss","wissemA1");

  // ESP8266_Init();

    char ssid[] = "laptopwiss";
 8000a62:	4a44      	ldr	r2, [pc, #272]	; (8000b74 <main+0x148>)
 8000a64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a68:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a6a:	c303      	stmia	r3!, {r0, r1}
 8000a6c:	801a      	strh	r2, [r3, #0]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	0c12      	lsrs	r2, r2, #16
 8000a72:	701a      	strb	r2, [r3, #0]
    char password[] = "wissemA12";
 8000a74:	4a40      	ldr	r2, [pc, #256]	; (8000b78 <main+0x14c>)
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a7c:	c303      	stmia	r3!, {r0, r1}
 8000a7e:	801a      	strh	r2, [r3, #0]
    configureWiFi(ssid, password); // Connect to WiFi
 8000a80:	f107 0218 	add.w	r2, r7, #24
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff96 	bl	80009bc <configureWiFi>

    char apiKey[] = "R7WDHYB22J733QUZ";
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <main+0x150>)
 8000a92:	1d3c      	adds	r4, r7, #4
 8000a94:	461d      	mov	r5, r3
 8000a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	7023      	strb	r3, [r4, #0]
    char sensorData[] = "123"; // Replace with your actual sensor data
 8000a9e:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <main+0x154>)
 8000aa0:	603b      	str	r3, [r7, #0]
    	    char dataBuffer[50];
    	    sprintf(dataBuffer, "GET /update?api_key=%s&field1=%d\r\n", API_KEY, temperature);
    	    ESP8266_SendData(dataBuffer);
    	    HAL_Delay(10000); */

    	sendDataToThingSpeak(apiKey, sensorData);
 8000aa2:	463a      	mov	r2, r7
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff9f 	bl	80009ec <sendDataToThingSpeak>



    	if (convCompleted) {
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <main+0x158>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d056      	beq.n	8000b64 <main+0x138>

    	readValue =(uint16_t) rawValues[0];
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <main+0x140>)
 8000ab8:	881a      	ldrh	r2, [r3, #0]
 8000aba:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <main+0x15c>)
 8000abc:	801a      	strh	r2, [r3, #0]
    	readValue2 =(uint16_t) rawValues[1];
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <main+0x140>)
 8000ac0:	885a      	ldrh	r2, [r3, #2]
 8000ac2:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <main+0x160>)
 8000ac4:	801a      	strh	r2, [r3, #0]


    	             // Print the response
    	             printf("ThingSpeak Response: %s\r\n", responseBuffer);*/
/*******************************************************************************************************************************/
    	  HD44780_Clear();
 8000ac6:	f7ff fddd 	bl	8000684 <HD44780_Clear>
    	    		    HD44780_SetCursor(0, 0);
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f7ff fdef 	bl	80006b0 <HD44780_SetCursor>
    	    		    HD44780_PrintStr("Temp:");
 8000ad2:	482f      	ldr	r0, [pc, #188]	; (8000b90 <main+0x164>)
 8000ad4:	f7ff fe5d 	bl	8000792 <HD44780_PrintStr>
    	    		    HD44780_SetCursor(6, 0);
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2006      	movs	r0, #6
 8000adc:	f7ff fde8 	bl	80006b0 <HD44780_SetCursor>
    	    		    // Convert ADC value to string and then print it
    	    		    sprintf(msg, "%d", rawValues[0]);
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <main+0x140>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	492b      	ldr	r1, [pc, #172]	; (8000b94 <main+0x168>)
 8000ae8:	482b      	ldr	r0, [pc, #172]	; (8000b98 <main+0x16c>)
 8000aea:	f004 fb3b 	bl	8005164 <siprintf>
    	    		    HD44780_PrintStr(msg);
 8000aee:	482a      	ldr	r0, [pc, #168]	; (8000b98 <main+0x16c>)
 8000af0:	f7ff fe4f 	bl	8000792 <HD44780_PrintStr>

    	    		      HD44780_SetCursor(0, 1);
 8000af4:	2101      	movs	r1, #1
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fdda 	bl	80006b0 <HD44780_SetCursor>
    	    		      HD44780_PrintStr("Cons:");
 8000afc:	4827      	ldr	r0, [pc, #156]	; (8000b9c <main+0x170>)
 8000afe:	f7ff fe48 	bl	8000792 <HD44780_PrintStr>
    	    		      HD44780_SetCursor(6, 1);
 8000b02:	2101      	movs	r1, #1
 8000b04:	2006      	movs	r0, #6
 8000b06:	f7ff fdd3 	bl	80006b0 <HD44780_SetCursor>
    	    		     // Convert ADC value to string and then print it
    	    		      sprintf(msg, "%d", rawValues[1]);
 8000b0a:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <main+0x140>)
 8000b0c:	885b      	ldrh	r3, [r3, #2]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4920      	ldr	r1, [pc, #128]	; (8000b94 <main+0x168>)
 8000b12:	4821      	ldr	r0, [pc, #132]	; (8000b98 <main+0x16c>)
 8000b14:	f004 fb26 	bl	8005164 <siprintf>
    	    		      HD44780_PrintStr(msg);
 8000b18:	481f      	ldr	r0, [pc, #124]	; (8000b98 <main+0x16c>)
 8000b1a:	f7ff fe3a 	bl	8000792 <HD44780_PrintStr>

    	if (readValue > 2000) {
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <main+0x15c>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b26:	d905      	bls.n	8000b34 <main+0x108>
    		    HD44780_PrintStr("Temp:");
    		    HD44780_SetCursor(6, 0);
    		    // Convert ADC value to string and then print it
    		    sprintf(msg, "%d", rawValues[0]);
    		    HD44780_PrintStr(msg);   */
    		    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b2e:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <main+0x174>)
 8000b30:	f002 f91a 	bl	8002d68 <HAL_GPIO_WritePin>
    		    // Send temperature value over UART
    		      //sprintf(buffer3, "Temperature: %d\r\n", rawValues[0]);
    		      //HAL_UART_Transmit(&huart2, (uint8_t *)buffer3, strlen(buffer3), HAL_MAX_DELAY);
    	    	    		  }

    	    	    	    if ( readValue2 > 3000 ){
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <main+0x160>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d905      	bls.n	8000b4c <main+0x120>
    	    	    	    	    HD44780_SetCursor(6, 1);
    	    	    	    	    // Convert ADC value to string and then print it
    	    	    	    	    sprintf(msg, "%d", rawValues[1]);
    	    	    	    	    HD44780_PrintStr(msg);  */
    	    	    	    	   // HAL_Delay(2000);
    	    	    	    	    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b46:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <main+0x174>)
 8000b48:	f002 f90e 	bl	8002d68 <HAL_GPIO_WritePin>
    	    	    	    	    // Send consumption value over UART
    	    	    	    	    //sprintf(buffer3, "Consumption: %d\r\n", rawValues[1]);
    	    	    	    	  //  HAL_UART_Transmit(&huart2, (uint8_t *)buffer3, strlen(buffer3), HAL_MAX_DELAY);
    	    	              }

    	    	    	    convCompleted = 0;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <main+0x158>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	701a      	strb	r2, [r3, #0]
    	 printf("ADC1 Value: %d, ADC2 Value: %d\r\n", readValue, readValue2);
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <main+0x15c>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <main+0x160>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <main+0x178>)
 8000b60:	f004 faee 	bl	8005140 <iprintf>
    	//	readValue =(uint16_t) rawValues[0];
    	//	readValue2 =(uint16_t) rawValues[1];
    	//}

    	  // Add appropriate delay to control the loop speed
          HAL_Delay(50); // Adjust the delay as needed
 8000b64:	2032      	movs	r0, #50	; 0x32
 8000b66:	f000 fcff 	bl	8001568 <HAL_Delay>
    	sendDataToThingSpeak(apiKey, sensorData);
 8000b6a:	e79a      	b.n	8000aa2 <main+0x76>
 8000b6c:	200001e0 	.word	0x200001e0
 8000b70:	2000009c 	.word	0x2000009c
 8000b74:	08006288 	.word	0x08006288
 8000b78:	08006294 	.word	0x08006294
 8000b7c:	080062a0 	.word	0x080062a0
 8000b80:	00333231 	.word	0x00333231
 8000b84:	20000099 	.word	0x20000099
 8000b88:	200001dc 	.word	0x200001dc
 8000b8c:	200001de 	.word	0x200001de
 8000b90:	08006250 	.word	0x08006250
 8000b94:	08006258 	.word	0x08006258
 8000b98:	200001e4 	.word	0x200001e4
 8000b9c:	0800625c 	.word	0x0800625c
 8000ba0:	40020c00 	.word	0x40020c00
 8000ba4:	08006264 	.word	0x08006264

08000ba8 <HAL_GPIO_EXTI_Callback>:
  * @brief System Clock Configuration
  * @retval None
  */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_4) // Check if the interrupt is from Button 1 (Assuming GPIO_PIN_4 is Button 1)
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	2b10      	cmp	r3, #16
 8000bb6:	d115      	bne.n	8000be4 <HAL_GPIO_EXTI_Callback+0x3c>
    {
        // Handle Button 1 interrupt
    	 HD44780_Clear();
 8000bb8:	f7ff fd64 	bl	8000684 <HD44780_Clear>
    	 HD44780_SetCursor(0, 0);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fd76 	bl	80006b0 <HD44780_SetCursor>
    	 HD44780_PrintStr("Ventillation actif");
 8000bc4:	480e      	ldr	r0, [pc, #56]	; (8000c00 <HAL_GPIO_EXTI_Callback+0x58>)
 8000bc6:	f7ff fde4 	bl	8000792 <HD44780_PrintStr>
         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd0:	480c      	ldr	r0, [pc, #48]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000bd2:	f002 f8c9 	bl	8002d68 <HAL_GPIO_WritePin>
         HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000bde:	f002 f8c3 	bl	8002d68 <HAL_GPIO_WritePin>
    else if (GPIO_Pin == GPIO_PIN_5) // Replace /* Pin for Button 2 */ with the actual pin for Button 2
    {
    	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
    }
    // Add more else if statements for additional buttons if needed
}
 8000be2:	e008      	b.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x4e>
    else if (GPIO_Pin == GPIO_PIN_5) // Replace /* Pin for Button 2 */ with the actual pin for Button 2
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	2b20      	cmp	r3, #32
 8000be8:	d105      	bne.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x4e>
    	        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000bf2:	f002 f8b9 	bl	8002d68 <HAL_GPIO_WritePin>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	080062b4 	.word	0x080062b4
 8000c04:	40020c00 	.word	0x40020c00

08000c08 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b094      	sub	sp, #80	; 0x50
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	2230      	movs	r2, #48	; 0x30
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fb07 	bl	800522a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <SystemClock_Config+0xc8>)
 8000c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <SystemClock_Config+0xc8>)
 8000c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3c:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <SystemClock_Config+0xc8>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <SystemClock_Config+0xcc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <SystemClock_Config+0xcc>)
 8000c52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <SystemClock_Config+0xcc>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c78:	2304      	movs	r3, #4
 8000c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000c7c:	2332      	movs	r3, #50	; 0x32
 8000c7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c84:	2304      	movs	r3, #4
 8000c86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c88:	f107 0320 	add.w	r3, r7, #32
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fce9 	bl	8003664 <HAL_RCC_OscConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c98:	f000 f976 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 ff4b 	bl	8003b54 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cc4:	f000 f960 	bl	8000f88 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3750      	adds	r7, #80	; 0x50
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40007000 	.word	0x40007000

08000cd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000cea:	4b28      	ldr	r3, [pc, #160]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cec:	4a28      	ldr	r2, [pc, #160]	; (8000d90 <MX_ADC1_Init+0xb8>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b25      	ldr	r3, [pc, #148]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d02:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d18:	4a1e      	ldr	r2, [pc, #120]	; (8000d94 <MX_ADC1_Init+0xbc>)
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d36:	4815      	ldr	r0, [pc, #84]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d38:	f000 fc3a 	bl	80015b0 <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 f921 	bl	8000f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d58:	f000 feac 	bl	8001ab4 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f000 f911 	bl	8000f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_ADC1_Init+0xb4>)
 8000d74:	f000 fe9e 	bl	8001ab4 <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d7e:	f000 f903 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	40012000 	.word	0x40012000
 8000d94:	0f000001 	.word	0x0f000001

08000d98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000d9e:	4a13      	ldr	r2, [pc, #76]	; (8000dec <MX_I2C1_Init+0x54>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000da4:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x58>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000db6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_I2C1_Init+0x50>)
 8000dd6:	f001 fff9 	bl	8002dcc <HAL_I2C_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de0:	f000 f8d2 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000144 	.word	0x20000144
 8000dec:	40005400 	.word	0x40005400
 8000df0:	000186a0 	.word	0x000186a0

08000df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_USART2_UART_Init+0x50>)
 8000dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e2a:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	f003 f8b2 	bl	8003f94 <HAL_UART_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e36:	f000 f8a7 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000198 	.word	0x20000198
 8000e44:	40004400 	.word	0x40004400

08000e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_DMA_Init+0x3c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <MX_DMA_Init+0x3c>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_DMA_Init+0x3c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2038      	movs	r0, #56	; 0x38
 8000e70:	f001 f9a5 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e74:	2038      	movs	r0, #56	; 0x38
 8000e76:	f001 f9be 	bl	80021f6 <HAL_NVIC_EnableIRQ>

}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b36      	ldr	r3, [pc, #216]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a35      	ldr	r2, [pc, #212]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b33      	ldr	r3, [pc, #204]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a20      	ldr	r2, [pc, #128]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1e      	ldr	r3, [pc, #120]	; (8000f7c <MX_GPIO_Init+0xf4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000f14:	481a      	ldr	r0, [pc, #104]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000f16:	f001 ff27 	bl	8002d68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f1a:	2330      	movs	r3, #48	; 0x30
 8000f1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4815      	ldr	r0, [pc, #84]	; (8000f84 <MX_GPIO_Init+0xfc>)
 8000f30:	f001 fd7e 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000f34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <MX_GPIO_Init+0xf8>)
 8000f4e:	f001 fd6f 	bl	8002a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	200a      	movs	r0, #10
 8000f58:	f001 f931 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 f94a 	bl	80021f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2017      	movs	r0, #23
 8000f68:	f001 f929 	bl	80021be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f6c:	2017      	movs	r0, #23
 8000f6e:	f001 f942 	bl	80021f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f72:	bf00      	nop
 8000f74:	3728      	adds	r7, #40	; 0x28
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40020000 	.word	0x40020000

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <HAL_ADC_MspInit+0xec>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d15f      	bne.n	80010c6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <HAL_ADC_MspInit+0xf0>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <HAL_ADC_MspInit+0xf0>)
 8001010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_ADC_MspInit+0xf0>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b2b      	ldr	r3, [pc, #172]	; (80010d4 <HAL_ADC_MspInit+0xf0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <HAL_ADC_MspInit+0xf0>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <HAL_ADC_MspInit+0xf0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800103e:	2306      	movs	r3, #6
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	2303      	movs	r3, #3
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4821      	ldr	r0, [pc, #132]	; (80010d8 <HAL_ADC_MspInit+0xf4>)
 8001052:	f001 fced 	bl	8002a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001058:	4a21      	ldr	r2, [pc, #132]	; (80010e0 <HAL_ADC_MspInit+0xfc>)
 800105a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001080:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001084:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800108c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800109a:	4810      	ldr	r0, [pc, #64]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 800109c:	f001 f8c6 	bl	800222c <HAL_DMA_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010a6:	f7ff ff6f 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_ADC_MspInit+0xf8>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	2012      	movs	r0, #18
 80010bc:	f001 f87f 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010c0:	2012      	movs	r0, #18
 80010c2:	f001 f898 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40012000 	.word	0x40012000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	200000e4 	.word	0x200000e4
 80010e0:	40026410 	.word	0x40026410

080010e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_I2C_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12b      	bne.n	800115e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_I2C_MspInit+0x88>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_I2C_MspInit+0x88>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_I2C_MspInit+0x88>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001122:	23c0      	movs	r3, #192	; 0xc0
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001126:	2312      	movs	r3, #18
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001132:	2304      	movs	r3, #4
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <HAL_I2C_MspInit+0x8c>)
 800113e:	f001 fc77 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_I2C_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <HAL_I2C_MspInit+0x88>)
 800114c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001150:	6413      	str	r3, [r2, #64]	; 0x40
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0x88>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40005400 	.word	0x40005400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020400 	.word	0x40020400

08001174 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_UART_MspInit+0x94>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d133      	bne.n	80011fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b1c      	ldr	r3, [pc, #112]	; (800120c <HAL_UART_MspInit+0x98>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <HAL_UART_MspInit+0x98>)
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_UART_MspInit+0x98>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_UART_MspInit+0x98>)
 80011bc:	f043 0308 	orr.w	r3, r3, #8
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x98>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011ce:	2360      	movs	r3, #96	; 0x60
 80011d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011da:	2303      	movs	r3, #3
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011de:	2307      	movs	r3, #7
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <HAL_UART_MspInit+0x9c>)
 80011ea:	f001 fc21 	bl	8002a30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2100      	movs	r1, #0
 80011f2:	2026      	movs	r0, #38	; 0x26
 80011f4:	f000 ffe3 	bl	80021be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f8:	2026      	movs	r0, #38	; 0x26
 80011fa:	f000 fffc 	bl	80021f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40004400 	.word	0x40004400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020c00 	.word	0x40020c00

08001214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <NMI_Handler+0x4>

0800121a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121e:	e7fe      	b.n	800121e <HardFault_Handler+0x4>

08001220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler+0x4>

08001226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <UsageFault_Handler+0x4>

08001232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001260:	f000 f962 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800126c:	2010      	movs	r0, #16
 800126e:	f001 fd95 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <ADC_IRQHandler+0x10>)
 800127e:	f000 f9da 	bl	8001636 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000009c 	.word	0x2000009c

0800128c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001290:	2020      	movs	r0, #32
 8001292:	f001 fd83 	bl	8002d9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <USART2_IRQHandler>:
  * @brief This function handles USART2 global interrupt.
  */


void USART2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
 // Uart_isr(&huart2);
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <USART2_IRQHandler+0x10>)
 80012a2:	f002 ff57 	bl	8004154 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000198 	.word	0x20000198

080012b0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA2_Stream0_IRQHandler+0x10>)
 80012b6:	f001 f951 	bl	800255c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200000e4 	.word	0x200000e4

080012c4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	e00a      	b.n	80012ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012d6:	f3af 8000 	nop.w
 80012da:	4601      	mov	r1, r0
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	60ba      	str	r2, [r7, #8]
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbf0      	blt.n	80012d6 <_read+0x12>
  }

  return len;
 80012f4:	687b      	ldr	r3, [r7, #4]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e009      	b.n	8001324 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf1      	blt.n	8001310 <_write+0x12>
  }
  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_close>:

int _close(int file)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135e:	605a      	str	r2, [r3, #4]
  return 0;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_isatty>:

int _isatty(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a8:	4a14      	ldr	r2, [pc, #80]	; (80013fc <_sbrk+0x5c>)
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <_sbrk+0x60>)
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b4:	4b13      	ldr	r3, [pc, #76]	; (8001404 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <_sbrk+0x64>)
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <_sbrk+0x68>)
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d207      	bcs.n	80013e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d0:	f003 ff7a 	bl	80052c8 <__errno>
 80013d4:	4603      	mov	r3, r0
 80013d6:	220c      	movs	r2, #12
 80013d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e009      	b.n	80013f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <_sbrk+0x64>)
 80013f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20020000 	.word	0x20020000
 8001400:	00000400 	.word	0x00000400
 8001404:	200001f8 	.word	0x200001f8
 8001408:	20000350 	.word	0x20000350

0800140c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <SystemInit+0x20>)
 8001412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001416:	4a05      	ldr	r2, [pc, #20]	; (800142c <SystemInit+0x20>)
 8001418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800141c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001468 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001436:	490e      	ldr	r1, [pc, #56]	; (8001470 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800143c:	e002      	b.n	8001444 <LoopCopyDataInit>

0800143e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001442:	3304      	adds	r3, #4

08001444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001448:	d3f9      	bcc.n	800143e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800144c:	4c0b      	ldr	r4, [pc, #44]	; (800147c <LoopFillZerobss+0x26>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001450:	e001      	b.n	8001456 <LoopFillZerobss>

08001452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001454:	3204      	adds	r2, #4

08001456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001458:	d3fb      	bcc.n	8001452 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800145a:	f7ff ffd7 	bl	800140c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800145e:	f003 ff39 	bl	80052d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001462:	f7ff fae3 	bl	8000a2c <main>
  bx  lr    
 8001466:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001474:	0800632c 	.word	0x0800632c
  ldr r2, =_sbss
 8001478:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800147c:	2000034c 	.word	0x2000034c

08001480 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <CAN1_RX0_IRQHandler>
	...

08001484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001488:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <HAL_Init+0x40>)
 800148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_Init+0x40>)
 800149a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800149e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_Init+0x40>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <HAL_Init+0x40>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f000 fe7b 	bl	80021a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b2:	200f      	movs	r0, #15
 80014b4:	f000 f808 	bl	80014c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff fd6c 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40023c00 	.word	0x40023c00

080014c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x54>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_InitTick+0x58>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014de:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fe93 	bl	8002212 <HAL_SYSTICK_Config>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00e      	b.n	8001514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b0f      	cmp	r3, #15
 80014fa:	d80a      	bhi.n	8001512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014fc:	2200      	movs	r2, #0
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f000 fe5b 	bl	80021be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <HAL_InitTick+0x5c>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000010 	.word	0x20000010
 8001520:	20000018 	.word	0x20000018
 8001524:	20000014 	.word	0x20000014

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000018 	.word	0x20000018
 800154c:	200001fc 	.word	0x200001fc

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200001fc 	.word	0x200001fc

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000018 	.word	0x20000018

080015b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e033      	b.n	800162e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fd08 	bl	8000fe4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f6:	f023 0302 	bic.w	r3, r3, #2
 80015fa:	f043 0202 	orr.w	r2, r3, #2
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fb78 	bl	8001cf8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
 800161e:	e001      	b.n	8001624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	f003 0320 	and.w	r3, r3, #32
 8001664:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d049      	beq.n	8001700 <HAL_ADC_IRQHandler+0xca>
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d046      	beq.n	8001700 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d105      	bne.n	800168a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d12b      	bne.n	80016f0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d127      	bne.n	80016f0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d119      	bne.n	80016f0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0220 	bic.w	r2, r2, #32
 80016ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d105      	bne.n	80016f0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f043 0201 	orr.w	r2, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff f93d 	bl	8000970 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f06f 0212 	mvn.w	r2, #18
 80016fe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d057      	beq.n	80017c6 <HAL_ADC_IRQHandler+0x190>
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d054      	beq.n	80017c6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f003 0310 	and.w	r3, r3, #16
 8001724:	2b00      	cmp	r3, #0
 8001726:	d105      	bne.n	8001734 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d139      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d006      	beq.n	800175e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800175a:	2b00      	cmp	r3, #0
 800175c:	d12b      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001768:	2b00      	cmp	r3, #0
 800176a:	d124      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11d      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d119      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001790:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d105      	bne.n	80017b6 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fc1c 	bl	8001ff4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f06f 020c 	mvn.w	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d017      	beq.n	800180c <HAL_ADC_IRQHandler+0x1d6>
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d014      	beq.n	800180c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10d      	bne.n	800180c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 f945 	bl	8001a8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f06f 0201 	mvn.w	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0320 	and.w	r3, r3, #32
 8001812:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800181a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_ADC_IRQHandler+0x218>
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d012      	beq.n	800184e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182c:	f043 0202 	orr.w	r2, r3, #2
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0220 	mvn.w	r2, #32
 800183c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f92e 	bl	8001aa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0220 	mvn.w	r2, #32
 800184c:	601a      	str	r2, [r3, #0]
  }
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Start_DMA+0x1e>
 8001872:	2302      	movs	r3, #2
 8001874:	e0e9      	b.n	8001a4a <HAL_ADC_Start_DMA+0x1f2>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d018      	beq.n	80018be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800189c:	4b6d      	ldr	r3, [pc, #436]	; (8001a54 <HAL_ADC_Start_DMA+0x1fc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6d      	ldr	r2, [pc, #436]	; (8001a58 <HAL_ADC_Start_DMA+0x200>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9a      	lsrs	r2, r3, #18
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d107      	bne.n	80018de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	f040 80a1 	bne.w	8001a30 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018f6:	f023 0301 	bic.w	r3, r3, #1
 80018fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d007      	beq.n	8001920 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001918:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192c:	d106      	bne.n	800193c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f023 0206 	bic.w	r2, r3, #6
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
 800193a:	e002      	b.n	8001942 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800194a:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <HAL_ADC_Start_DMA+0x204>)
 800194c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	4a43      	ldr	r2, [pc, #268]	; (8001a60 <HAL_ADC_Start_DMA+0x208>)
 8001954:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800195a:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <HAL_ADC_Start_DMA+0x20c>)
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	4a41      	ldr	r2, [pc, #260]	; (8001a68 <HAL_ADC_Start_DMA+0x210>)
 8001964:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800196e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800197e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800198e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	334c      	adds	r3, #76	; 0x4c
 800199a:	4619      	mov	r1, r3
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f000 fcf2 	bl	8002388 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d12a      	bne.n	8001a06 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_ADC_Start_DMA+0x214>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d015      	beq.n	80019e6 <HAL_ADC_Start_DMA+0x18e>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <HAL_ADC_Start_DMA+0x218>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d105      	bne.n	80019d0 <HAL_ADC_Start_DMA+0x178>
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <HAL_ADC_Start_DMA+0x204>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_ADC_Start_DMA+0x21c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d136      	bne.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_ADC_Start_DMA+0x204>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d130      	bne.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d129      	bne.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	e020      	b.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <HAL_ADC_Start_DMA+0x214>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d11b      	bne.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d114      	bne.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	e00b      	b.n	8001a48 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0210 	orr.w	r2, r3, #16
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	f043 0201 	orr.w	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	20000010 	.word	0x20000010
 8001a58:	431bde83 	.word	0x431bde83
 8001a5c:	40012300 	.word	0x40012300
 8001a60:	08001ef1 	.word	0x08001ef1
 8001a64:	08001fab 	.word	0x08001fab
 8001a68:	08001fc7 	.word	0x08001fc7
 8001a6c:	40012000 	.word	0x40012000
 8001a70:	40012100 	.word	0x40012100
 8001a74:	40012200 	.word	0x40012200

08001a78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1c>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e105      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x228>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b09      	cmp	r3, #9
 8001ade:	d925      	bls.n	8001b2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68d9      	ldr	r1, [r3, #12]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	461a      	mov	r2, r3
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	3b1e      	subs	r3, #30
 8001af6:	2207      	movs	r2, #7
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43da      	mvns	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	400a      	ands	r2, r1
 8001b04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68d9      	ldr	r1, [r3, #12]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	4618      	mov	r0, r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4403      	add	r3, r0
 8001b1e:	3b1e      	subs	r3, #30
 8001b20:	409a      	lsls	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	e022      	b.n	8001b72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6919      	ldr	r1, [r3, #16]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	2207      	movs	r2, #7
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	4603      	mov	r3, r0
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4403      	add	r3, r0
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b06      	cmp	r3, #6
 8001b78:	d824      	bhi.n	8001bc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	3b05      	subs	r3, #5
 8001b8c:	221f      	movs	r2, #31
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	400a      	ands	r2, r1
 8001b9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3b05      	subs	r3, #5
 8001bb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc2:	e04c      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d824      	bhi.n	8001c16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	4413      	add	r3, r2
 8001bdc:	3b23      	subs	r3, #35	; 0x23
 8001bde:	221f      	movs	r2, #31
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43da      	mvns	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	400a      	ands	r2, r1
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	3b23      	subs	r3, #35	; 0x23
 8001c08:	fa00 f203 	lsl.w	r2, r0, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	631a      	str	r2, [r3, #48]	; 0x30
 8001c14:	e023      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	3b41      	subs	r3, #65	; 0x41
 8001c28:	221f      	movs	r2, #31
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	400a      	ands	r2, r1
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b41      	subs	r3, #65	; 0x41
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5e:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <HAL_ADC_ConfigChannel+0x234>)
 8001c60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a21      	ldr	r2, [pc, #132]	; (8001cec <HAL_ADC_ConfigChannel+0x238>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1cc>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b12      	cmp	r3, #18
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a19      	ldr	r2, [pc, #100]	; (8001cec <HAL_ADC_ConfigChannel+0x238>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d123      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x21e>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b10      	cmp	r3, #16
 8001c90:	d003      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0x1e6>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b11      	cmp	r3, #17
 8001c98:	d11b      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d111      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_ADC_ConfigChannel+0x23c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <HAL_ADC_ConfigChannel+0x240>)
 8001cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb8:	0c9a      	lsrs	r2, r3, #18
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cc4:	e002      	b.n	8001ccc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f9      	bne.n	8001cc6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	40012000 	.word	0x40012000
 8001cf0:	20000010 	.word	0x20000010
 8001cf4:	431bde83 	.word	0x431bde83

08001cf8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d00:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <ADC_Init+0x1f0>)
 8001d02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	021a      	lsls	r2, r3, #8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6899      	ldr	r1, [r3, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	4a58      	ldr	r2, [pc, #352]	; (8001eec <ADC_Init+0x1f4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d022      	beq.n	8001dd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6899      	ldr	r1, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	e00f      	b.n	8001df6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001df4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0202 	bic.w	r2, r2, #2
 8001e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6899      	ldr	r1, [r3, #8]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e1b      	ldrb	r3, [r3, #24]
 8001e10:	005a      	lsls	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01b      	beq.n	8001e5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	035a      	lsls	r2, r3, #13
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	e007      	b.n	8001e6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	051a      	lsls	r2, r3, #20
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6899      	ldr	r1, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eae:	025a      	lsls	r2, r3, #9
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6899      	ldr	r1, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	029a      	lsls	r2, r3, #10
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	0f000001 	.word	0x0f000001

08001ef0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d13c      	bne.n	8001f84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d12b      	bne.n	8001f7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d127      	bne.n	8001f7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d119      	bne.n	8001f7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0220 	bic.w	r2, r2, #32
 8001f56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f7fe fcf7 	bl	8000970 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f82:	e00e      	b.n	8001fa2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fd85 	bl	8001aa0 <HAL_ADC_ErrorCallback>
}
 8001f96:	e004      	b.n	8001fa2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f7ff fd5d 	bl	8001a78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f043 0204 	orr.w	r2, r3, #4
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fd5a 	bl	8001aa0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
	...

08002164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d301      	bcc.n	800217a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002176:	2301      	movs	r3, #1
 8002178:	e00f      	b.n	800219a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <SysTick_Config+0x40>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3b01      	subs	r3, #1
 8002180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002182:	210f      	movs	r1, #15
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f7ff ff8e 	bl	80020a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <SysTick_Config+0x40>)
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002192:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Config+0x40>)
 8002194:	2207      	movs	r2, #7
 8002196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000e010 	.word	0xe000e010

080021a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff ff29 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021be:	b580      	push	{r7, lr}
 80021c0:	b086      	sub	sp, #24
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	4603      	mov	r3, r0
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d0:	f7ff ff3e 	bl	8002050 <__NVIC_GetPriorityGrouping>
 80021d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	6978      	ldr	r0, [r7, #20]
 80021dc:	f7ff ff8e 	bl	80020fc <NVIC_EncodePriority>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e6:	4611      	mov	r1, r2
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff5d 	bl	80020a8 <__NVIC_SetPriority>
}
 80021ee:	bf00      	nop
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff ff31 	bl	800206c <__NVIC_EnableIRQ>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ffa2 	bl	8002164 <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002238:	f7ff f98a 	bl	8001550 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e099      	b.n	800237c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002268:	e00f      	b.n	800228a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226a:	f7ff f971 	bl	8001550 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b05      	cmp	r3, #5
 8002276:	d908      	bls.n	800228a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e078      	b.n	800237c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e8      	bne.n	800226a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	4b38      	ldr	r3, [pc, #224]	; (8002384 <HAL_DMA_Init+0x158>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685a      	ldr	r2, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4313      	orrs	r3, r2
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f023 0307 	bic.w	r3, r3, #7
 800230a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b04      	cmp	r3, #4
 800231c:	d117      	bne.n	800234e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00e      	beq.n	800234e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fb01 	bl	8002938 <DMA_CheckFifoParam>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2240      	movs	r2, #64	; 0x40
 8002340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800234a:	2301      	movs	r3, #1
 800234c:	e016      	b.n	800237c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fab8 	bl	80028cc <DMA_CalcBaseAndBitshift>
 800235c:	4603      	mov	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002364:	223f      	movs	r2, #63	; 0x3f
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	f010803f 	.word	0xf010803f

08002388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_DMA_Start_IT+0x26>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e040      	b.n	8002430 <HAL_DMA_Start_IT+0xa8>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d12f      	bne.n	8002422 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2202      	movs	r2, #2
 80023c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fa4a 	bl	8002870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	223f      	movs	r2, #63	; 0x3f
 80023e2:	409a      	lsls	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0216 	orr.w	r2, r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0208 	orr.w	r2, r2, #8
 800240e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	e005      	b.n	800242e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002444:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002446:	f7ff f883 	bl	8001550 <HAL_GetTick>
 800244a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d008      	beq.n	800246a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e052      	b.n	8002510 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 0216 	bic.w	r2, r2, #22
 8002478:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002488:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <HAL_DMA_Abort+0x62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	2b00      	cmp	r3, #0
 8002498:	d007      	beq.n	80024aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0208 	bic.w	r2, r2, #8
 80024a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f022 0201 	bic.w	r2, r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ba:	e013      	b.n	80024e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024bc:	f7ff f848 	bl	8001550 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d90c      	bls.n	80024e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2203      	movs	r2, #3
 80024d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e015      	b.n	8002510 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1e4      	bne.n	80024bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f6:	223f      	movs	r2, #63	; 0x3f
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d004      	beq.n	8002536 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e00c      	b.n	8002550 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002568:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <HAL_DMA_IRQHandler+0x248>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a8e      	ldr	r2, [pc, #568]	; (80027a8 <HAL_DMA_IRQHandler+0x24c>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002586:	2208      	movs	r2, #8
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	2208      	movs	r2, #8
 80025b6:	409a      	lsls	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	2201      	movs	r2, #1
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f043 0202 	orr.w	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002602:	2204      	movs	r2, #4
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	2204      	movs	r2, #4
 8002622:	409a      	lsls	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262c:	f043 0204 	orr.w	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	2210      	movs	r2, #16
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d043      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03c      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	2210      	movs	r2, #16
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d018      	beq.n	800269e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d024      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
 800268a:	e01f      	b.n	80026cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e016      	b.n	80026cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0208 	bic.w	r2, r2, #8
 80026ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	2220      	movs	r2, #32
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 808f 	beq.w	80027fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8087 	beq.w	80027fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	2220      	movs	r2, #32
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b05      	cmp	r3, #5
 8002704:	d136      	bne.n	8002774 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0216 	bic.w	r2, r2, #22
 8002714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_DMA_IRQHandler+0x1da>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0208 	bic.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	223f      	movs	r2, #63	; 0x3f
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d07e      	beq.n	8002868 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
        }
        return;
 8002772:	e079      	b.n	8002868 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01d      	beq.n	80027be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002794:	2b00      	cmp	r3, #0
 8002796:	d031      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
 80027a0:	e02c      	b.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
 80027a2:	bf00      	nop
 80027a4:	20000010 	.word	0x20000010
 80027a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e01e      	b.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10f      	bne.n	80027ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0210 	bic.w	r2, r2, #16
 80027da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	2b00      	cmp	r3, #0
 8002802:	d032      	beq.n	800286a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d022      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2205      	movs	r2, #5
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3301      	adds	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d307      	bcc.n	8002844 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f2      	bne.n	8002828 <HAL_DMA_IRQHandler+0x2cc>
 8002842:	e000      	b.n	8002846 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002844:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	e000      	b.n	800286a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002868:	bf00      	nop
    }
  }
}
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800288c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d108      	bne.n	80028b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ae:	e007      	b.n	80028c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3b10      	subs	r3, #16
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <DMA_CalcBaseAndBitshift+0x64>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <DMA_CalcBaseAndBitshift+0x68>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d909      	bls.n	800290e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58
 800290c:	e007      	b.n	800291e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	aaaaaaab 	.word	0xaaaaaaab
 8002934:	080062e0 	.word	0x080062e0

08002938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d856      	bhi.n	8002a06 <DMA_CheckFifoParam+0xce>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <DMA_CheckFifoParam+0x28>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002983 	.word	0x08002983
 8002968:	08002971 	.word	0x08002971
 800296c:	08002a07 	.word	0x08002a07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d046      	beq.n	8002a0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002980:	e043      	b.n	8002a0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800298a:	d140      	bne.n	8002a0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e03d      	b.n	8002a0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299a:	d121      	bne.n	80029e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d837      	bhi.n	8002a12 <DMA_CheckFifoParam+0xda>
 80029a2:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <DMA_CheckFifoParam+0x70>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029bf 	.word	0x080029bf
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	080029d1 	.word	0x080029d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e030      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d025      	beq.n	8002a16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ce:	e022      	b.n	8002a16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d8:	d11f      	bne.n	8002a1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029de:	e01c      	b.n	8002a1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d903      	bls.n	80029ee <DMA_CheckFifoParam+0xb6>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d003      	beq.n	80029f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029ec:	e018      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      break;
 80029f2:	e015      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e00b      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a06:	bf00      	nop
 8002a08:	e00a      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e008      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e006      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e004      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e16b      	b.n	8002d24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 815a 	bne.w	8002d1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d005      	beq.n	8002a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d130      	bne.n	8002ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 0201 	and.w	r2, r3, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d017      	beq.n	8002b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d123      	bne.n	8002b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80b4 	beq.w	8002d1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd2:	4a5b      	ldr	r2, [pc, #364]	; (8002d40 <HAL_GPIO_Init+0x310>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x314>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_GPIO_Init+0x318>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x31c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x320>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x21a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4e      	ldr	r2, [pc, #312]	; (8002d54 <HAL_GPIO_Init+0x324>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x216>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4d      	ldr	r2, [pc, #308]	; (8002d58 <HAL_GPIO_Init+0x328>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x212>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4c      	ldr	r2, [pc, #304]	; (8002d5c <HAL_GPIO_Init+0x32c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <HAL_GPIO_Init+0x330>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x20a>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00e      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	e00c      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e00a      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x310>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f ae90 	bls.w	8002a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40021400 	.word	0x40021400
 8002d5c:	40021800 	.word	0x40021800
 8002d60:	40021c00 	.word	0x40021c00
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
 8002d74:	4613      	mov	r3, r2
 8002d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d84:	e003      	b.n	8002d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	619a      	str	r2, [r3, #24]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fef4 	bl	8000ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40013c00 	.word	0x40013c00

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e12b      	b.n	8003036 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe f976 	bl	80010e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e30:	f001 f888 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8002e34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4a81      	ldr	r2, [pc, #516]	; (8003040 <HAL_I2C_Init+0x274>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d807      	bhi.n	8002e50 <HAL_I2C_Init+0x84>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4a80      	ldr	r2, [pc, #512]	; (8003044 <HAL_I2C_Init+0x278>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	e006      	b.n	8002e5e <HAL_I2C_Init+0x92>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a7d      	ldr	r2, [pc, #500]	; (8003048 <HAL_I2C_Init+0x27c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	bf94      	ite	ls
 8002e58:	2301      	movls	r3, #1
 8002e5a:	2300      	movhi	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0e7      	b.n	8003036 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4a78      	ldr	r2, [pc, #480]	; (800304c <HAL_I2C_Init+0x280>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	0c9b      	lsrs	r3, r3, #18
 8002e70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	4a6a      	ldr	r2, [pc, #424]	; (8003040 <HAL_I2C_Init+0x274>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d802      	bhi.n	8002ea0 <HAL_I2C_Init+0xd4>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	e009      	b.n	8002eb4 <HAL_I2C_Init+0xe8>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a69      	ldr	r2, [pc, #420]	; (8003050 <HAL_I2C_Init+0x284>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ec6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	495c      	ldr	r1, [pc, #368]	; (8003040 <HAL_I2C_Init+0x274>)
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	d819      	bhi.n	8002f08 <HAL_I2C_Init+0x13c>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1e59      	subs	r1, r3, #1
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee2:	1c59      	adds	r1, r3, #1
 8002ee4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ee8:	400b      	ands	r3, r1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00a      	beq.n	8002f04 <HAL_I2C_Init+0x138>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e59      	subs	r1, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	e051      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f04:	2304      	movs	r3, #4
 8002f06:	e04f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d111      	bne.n	8002f34 <HAL_I2C_Init+0x168>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	440b      	add	r3, r1
 8002f1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f22:	3301      	adds	r3, #1
 8002f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e012      	b.n	8002f5a <HAL_I2C_Init+0x18e>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	0099      	lsls	r1, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Init+0x196>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e022      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <HAL_I2C_Init+0x1bc>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	1e58      	subs	r0, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	440b      	add	r3, r1
 8002f78:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f86:	e00f      	b.n	8002fa8 <HAL_I2C_Init+0x1dc>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1e58      	subs	r0, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	0099      	lsls	r1, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	6809      	ldr	r1, [r1, #0]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6911      	ldr	r1, [r2, #16]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	4311      	orrs	r1, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	000186a0 	.word	0x000186a0
 8003044:	001e847f 	.word	0x001e847f
 8003048:	003d08ff 	.word	0x003d08ff
 800304c:	431bde83 	.word	0x431bde83
 8003050:	10624dd3 	.word	0x10624dd3

08003054 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b088      	sub	sp, #32
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	461a      	mov	r2, r3
 8003060:	460b      	mov	r3, r1
 8003062:	817b      	strh	r3, [r7, #10]
 8003064:	4613      	mov	r3, r2
 8003066:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7fe fa72 	bl	8001550 <HAL_GetTick>
 800306c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	f040 80e0 	bne.w	800323c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2319      	movs	r3, #25
 8003082:	2201      	movs	r2, #1
 8003084:	4970      	ldr	r1, [pc, #448]	; (8003248 <HAL_I2C_Master_Transmit+0x1f4>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f964 	bl	8003354 <I2C_WaitOnFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
 8003094:	e0d3      	b.n	800323e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_I2C_Master_Transmit+0x50>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0cc      	b.n	800323e <HAL_I2C_Master_Transmit+0x1ea>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d007      	beq.n	80030ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0201 	orr.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2221      	movs	r2, #33	; 0x21
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2210      	movs	r2, #16
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	893a      	ldrh	r2, [r7, #8]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a50      	ldr	r2, [pc, #320]	; (800324c <HAL_I2C_Master_Transmit+0x1f8>)
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800310c:	8979      	ldrh	r1, [r7, #10]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	6a3a      	ldr	r2, [r7, #32]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f89c 	bl	8003250 <I2C_MasterRequestWrite>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e08d      	b.n	800323e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003138:	e066      	b.n	8003208 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	6a39      	ldr	r1, [r7, #32]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f9de 	bl	8003500 <I2C_WaitOnTXEFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00d      	beq.n	8003166 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b04      	cmp	r3, #4
 8003150:	d107      	bne.n	8003162 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003160:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e06b      	b.n	800323e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	781a      	ldrb	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b01      	subs	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d11b      	bne.n	80031dc <HAL_I2C_Master_Transmit+0x188>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	6a39      	ldr	r1, [r7, #32]
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f9ce 	bl	8003582 <I2C_WaitOnBTFFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d107      	bne.n	8003204 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e01a      	b.n	800323e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	2b00      	cmp	r3, #0
 800320e:	d194      	bne.n	800313a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003238:	2300      	movs	r3, #0
 800323a:	e000      	b.n	800323e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800323c:	2302      	movs	r3, #2
  }
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	00100002 	.word	0x00100002
 800324c:	ffff0000 	.word	0xffff0000

08003250 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	460b      	mov	r3, r1
 800325e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	2b08      	cmp	r3, #8
 800326a:	d006      	beq.n	800327a <I2C_MasterRequestWrite+0x2a>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d003      	beq.n	800327a <I2C_MasterRequestWrite+0x2a>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003278:	d108      	bne.n	800328c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e00b      	b.n	80032a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b12      	cmp	r3, #18
 8003292:	d107      	bne.n	80032a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f84f 	bl	8003354 <I2C_WaitOnFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00d      	beq.n	80032d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ca:	d103      	bne.n	80032d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e035      	b.n	8003344 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e0:	d108      	bne.n	80032f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032f0:	611a      	str	r2, [r3, #16]
 80032f2:	e01b      	b.n	800332c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	11db      	asrs	r3, r3, #7
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f003 0306 	and.w	r3, r3, #6
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	f063 030f 	orn	r3, r3, #15
 8003304:	b2da      	uxtb	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	490e      	ldr	r1, [pc, #56]	; (800334c <I2C_MasterRequestWrite+0xfc>)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f875 	bl	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e010      	b.n	8003344 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4907      	ldr	r1, [pc, #28]	; (8003350 <I2C_MasterRequestWrite+0x100>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f865 	bl	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	00010008 	.word	0x00010008
 8003350:	00010002 	.word	0x00010002

08003354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003364:	e025      	b.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d021      	beq.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7fe f8ef 	bl	8001550 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_WaitOnFlagUntilTimeout+0x30>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2220      	movs	r2, #32
 800338e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f043 0220 	orr.w	r2, r3, #32
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e023      	b.n	80033fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d10d      	bne.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	43da      	mvns	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf0c      	ite	eq
 80033ce:	2301      	moveq	r3, #1
 80033d0:	2300      	movne	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	461a      	mov	r2, r3
 80033d6:	e00c      	b.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	4013      	ands	r3, r2
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d0b6      	beq.n	8003366 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b084      	sub	sp, #16
 8003406:	af00      	add	r7, sp, #0
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003410:	e051      	b.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003420:	d123      	bne.n	800346a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003430:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800343a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f043 0204 	orr.w	r2, r3, #4
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e046      	b.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d021      	beq.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7fe f86d 	bl	8001550 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d116      	bne.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f043 0220 	orr.w	r2, r3, #32
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e020      	b.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10c      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e00b      	b.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d18d      	bne.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350c:	e02d      	b.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f878 	bl	8003604 <I2C_IsAcknowledgeFailed>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e02d      	b.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003524:	d021      	beq.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003526:	f7fe f813 	bl	8001550 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	d302      	bcc.n	800353c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d116      	bne.n	800356a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e007      	b.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d1ca      	bne.n	800350e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	60b9      	str	r1, [r7, #8]
 800358c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800358e:	e02d      	b.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f837 	bl	8003604 <I2C_IsAcknowledgeFailed>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e02d      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d021      	beq.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7fd ffd2 	bl	8001550 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d302      	bcc.n	80035be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d116      	bne.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	f043 0220 	orr.w	r2, r3, #32
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e007      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d1ca      	bne.n	8003590 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d11b      	bne.n	8003654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e000      	b.n	8003656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e267      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d075      	beq.n	800376e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003682:	4b88      	ldr	r3, [pc, #544]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d00c      	beq.n	80036a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368e:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003696:	2b08      	cmp	r3, #8
 8003698:	d112      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	4b7e      	ldr	r3, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d05b      	beq.n	800376c <HAL_RCC_OscConfig+0x108>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d157      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e242      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b76      	ldr	r3, [pc, #472]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a75      	ldr	r2, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e01d      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e0:	d10c      	bne.n	80036fc <HAL_RCC_OscConfig+0x98>
 80036e2:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6f      	ldr	r2, [pc, #444]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a6c      	ldr	r2, [pc, #432]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	e00b      	b.n	8003714 <HAL_RCC_OscConfig+0xb0>
 80036fc:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a68      	ldr	r2, [pc, #416]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800370e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d013      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd ff18 	bl	8001550 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003724:	f7fd ff14 	bl	8001550 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e207      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCC_OscConfig+0xc0>
 8003742:	e014      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd ff04 	bl	8001550 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800374c:	f7fd ff00 	bl	8001550 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b64      	cmp	r3, #100	; 0x64
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1f3      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0xe8>
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800376c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377a:	4b4a      	ldr	r3, [pc, #296]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800378e:	2b08      	cmp	r3, #8
 8003790:	d11c      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003792:	4b44      	ldr	r3, [pc, #272]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d116      	bne.n	80037cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e1c7      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4937      	ldr	r1, [pc, #220]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	e03a      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d020      	beq.n	8003816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d4:	4b34      	ldr	r3, [pc, #208]	; (80038a8 <HAL_RCC_OscConfig+0x244>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd feb9 	bl	8001550 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fd feb5 	bl	8001550 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e1a8      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f4:	4b2b      	ldr	r3, [pc, #172]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4925      	ldr	r1, [pc, #148]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003810:	4313      	orrs	r3, r2
 8003812:	600b      	str	r3, [r1, #0]
 8003814:	e015      	b.n	8003842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_OscConfig+0x244>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381c:	f7fd fe98 	bl	8001550 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003824:	f7fd fe94 	bl	8001550 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e187      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d036      	beq.n	80038bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d016      	beq.n	8003884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_RCC_OscConfig+0x248>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fd fe78 	bl	8001550 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003864:	f7fd fe74 	bl	8001550 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e167      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003876:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_OscConfig+0x240>)
 8003878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0x200>
 8003882:	e01b      	b.n	80038bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_OscConfig+0x248>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388a:	f7fd fe61 	bl	8001550 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003890:	e00e      	b.n	80038b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003892:	f7fd fe5d 	bl	8001550 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d907      	bls.n	80038b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e150      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470000 	.word	0x42470000
 80038ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	4b88      	ldr	r3, [pc, #544]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1ea      	bne.n	8003892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8097 	beq.w	80039f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ce:	4b81      	ldr	r3, [pc, #516]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10f      	bne.n	80038fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	4b7d      	ldr	r3, [pc, #500]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	4a7c      	ldr	r2, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e8:	6413      	str	r3, [r2, #64]	; 0x40
 80038ea:	4b7a      	ldr	r3, [pc, #488]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f6:	2301      	movs	r3, #1
 80038f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fa:	4b77      	ldr	r3, [pc, #476]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d118      	bne.n	8003938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003906:	4b74      	ldr	r3, [pc, #464]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a73      	ldr	r2, [pc, #460]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003912:	f7fd fe1d 	bl	8001550 <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391a:	f7fd fe19 	bl	8001550 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e10c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <HAL_RCC_OscConfig+0x474>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x2ea>
 8003940:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003944:	4a63      	ldr	r2, [pc, #396]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	6713      	str	r3, [r2, #112]	; 0x70
 800394c:	e01c      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b05      	cmp	r3, #5
 8003954:	d10c      	bne.n	8003970 <HAL_RCC_OscConfig+0x30c>
 8003956:	4b5f      	ldr	r3, [pc, #380]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a5e      	ldr	r2, [pc, #376]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003966:	4a5b      	ldr	r2, [pc, #364]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0x324>
 8003970:	4b58      	ldr	r3, [pc, #352]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003974:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	6713      	str	r3, [r2, #112]	; 0x70
 800397c:	4b55      	ldr	r3, [pc, #340]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	4a54      	ldr	r2, [pc, #336]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003982:	f023 0304 	bic.w	r3, r3, #4
 8003986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d015      	beq.n	80039bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd fdde 	bl	8001550 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	e00a      	b.n	80039ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003998:	f7fd fdda 	bl	8001550 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e0cb      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	4b49      	ldr	r3, [pc, #292]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0ee      	beq.n	8003998 <HAL_RCC_OscConfig+0x334>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039bc:	f7fd fdc8 	bl	8001550 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fd fdc4 	bl	8001550 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0b5      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ee      	bne.n	80039c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d105      	bne.n	80039f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ec:	4b39      	ldr	r3, [pc, #228]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	4a38      	ldr	r2, [pc, #224]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a1 	beq.w	8003b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a02:	4b34      	ldr	r3, [pc, #208]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b08      	cmp	r3, #8
 8003a0c:	d05c      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d141      	bne.n	8003a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b31      	ldr	r3, [pc, #196]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fd98 	bl	8001550 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fd fd94 	bl	8001550 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e087      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69da      	ldr	r2, [r3, #28]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a72:	f7fd fd6d 	bl	8001550 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fd fd69 	bl	8001550 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e05c      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x416>
 8003a98:	e054      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fd fd56 	bl	8001550 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fd fd52 	bl	8001550 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e045      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x444>
 8003ac6:	e03d      	b.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e038      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d028      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d121      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d11a      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0cc      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b68:	4b68      	ldr	r3, [pc, #416]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d90c      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b76:	4b65      	ldr	r3, [pc, #404]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	683a      	ldr	r2, [r7, #0]
 8003b7a:	b2d2      	uxtb	r2, r2
 8003b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d001      	beq.n	8003b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0b8      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba8:	4b59      	ldr	r3, [pc, #356]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bc0:	4b53      	ldr	r3, [pc, #332]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a52      	ldr	r2, [pc, #328]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b50      	ldr	r3, [pc, #320]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	494d      	ldr	r1, [pc, #308]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d044      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d107      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b47      	ldr	r3, [pc, #284]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d119      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e07f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d003      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c0e:	2b03      	cmp	r3, #3
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c12:	4b3f      	ldr	r3, [pc, #252]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d109      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e06f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c22:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e067      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c32:	4b37      	ldr	r3, [pc, #220]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f023 0203 	bic.w	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4934      	ldr	r1, [pc, #208]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c44:	f7fd fc84 	bl	8001550 <HAL_GetTick>
 8003c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c4c:	f7fd fc80 	bl	8001550 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e04f      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	4b2b      	ldr	r3, [pc, #172]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 020c 	and.w	r2, r3, #12
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1eb      	bne.n	8003c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c74:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d20c      	bcs.n	8003c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8a:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <HAL_RCC_ClockConfig+0x1b8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e032      	b.n	8003d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4916      	ldr	r1, [pc, #88]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cc6:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	490e      	ldr	r1, [pc, #56]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cda:	f000 f821 	bl	8003d20 <HAL_RCC_GetSysClockFreq>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	490a      	ldr	r1, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	5ccb      	ldrb	r3, [r1, r3]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fbe4 	bl	80014c8 <HAL_InitTick>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023c00 	.word	0x40023c00
 8003d10:	40023800 	.word	0x40023800
 8003d14:	080062c8 	.word	0x080062c8
 8003d18:	20000010 	.word	0x20000010
 8003d1c:	20000014 	.word	0x20000014

08003d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d24:	b094      	sub	sp, #80	; 0x50
 8003d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d30:	2300      	movs	r3, #0
 8003d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d38:	4b79      	ldr	r3, [pc, #484]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d00d      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0x40>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	f200 80e1 	bhi.w	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <HAL_RCC_GetSysClockFreq+0x34>
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d52:	e0db      	b.n	8003f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b73      	ldr	r3, [pc, #460]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003d58:	e0db      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d5a:	4b73      	ldr	r3, [pc, #460]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d5e:	e0d8      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d60:	4b6f      	ldr	r3, [pc, #444]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d063      	beq.n	8003e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d76:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d92:	4622      	mov	r2, r4
 8003d94:	462b      	mov	r3, r5
 8003d96:	f04f 0000 	mov.w	r0, #0
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	0159      	lsls	r1, r3, #5
 8003da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da4:	0150      	lsls	r0, r2, #5
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4621      	mov	r1, r4
 8003dac:	1a51      	subs	r1, r2, r1
 8003dae:	6139      	str	r1, [r7, #16]
 8003db0:	4629      	mov	r1, r5
 8003db2:	eb63 0301 	sbc.w	r3, r3, r1
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	018b      	lsls	r3, r1, #6
 8003dc8:	4651      	mov	r1, sl
 8003dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dce:	4651      	mov	r1, sl
 8003dd0:	018a      	lsls	r2, r1, #6
 8003dd2:	4651      	mov	r1, sl
 8003dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8003dd8:	4659      	mov	r1, fp
 8003dda:	eb63 0901 	sbc.w	r9, r3, r1
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	f04f 0300 	mov.w	r3, #0
 8003de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003df2:	4690      	mov	r8, r2
 8003df4:	4699      	mov	r9, r3
 8003df6:	4623      	mov	r3, r4
 8003df8:	eb18 0303 	adds.w	r3, r8, r3
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	462b      	mov	r3, r5
 8003e00:	eb49 0303 	adc.w	r3, r9, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e12:	4629      	mov	r1, r5
 8003e14:	024b      	lsls	r3, r1, #9
 8003e16:	4621      	mov	r1, r4
 8003e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	024a      	lsls	r2, r1, #9
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e26:	2200      	movs	r2, #0
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e30:	f7fc fa26 	bl	8000280 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4613      	mov	r3, r2
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3c:	e058      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e3e:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	2200      	movs	r2, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	4611      	mov	r1, r2
 8003e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	2300      	movs	r3, #0
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e58:	4642      	mov	r2, r8
 8003e5a:	464b      	mov	r3, r9
 8003e5c:	f04f 0000 	mov.w	r0, #0
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	0159      	lsls	r1, r3, #5
 8003e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e6a:	0150      	lsls	r0, r2, #5
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4641      	mov	r1, r8
 8003e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e76:	4649      	mov	r1, r9
 8003e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e90:	ebb2 040a 	subs.w	r4, r2, sl
 8003e94:	eb63 050b 	sbc.w	r5, r3, fp
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	00eb      	lsls	r3, r5, #3
 8003ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ea6:	00e2      	lsls	r2, r4, #3
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	461d      	mov	r5, r3
 8003eac:	4643      	mov	r3, r8
 8003eae:	18e3      	adds	r3, r4, r3
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	eb45 0303 	adc.w	r3, r5, r3
 8003eb8:	607b      	str	r3, [r7, #4]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	028b      	lsls	r3, r1, #10
 8003eca:	4621      	mov	r1, r4
 8003ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ed0:	4621      	mov	r1, r4
 8003ed2:	028a      	lsls	r2, r1, #10
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eda:	2200      	movs	r2, #0
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	61fa      	str	r2, [r7, #28]
 8003ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee4:	f7fc f9cc 	bl	8000280 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0303 	and.w	r3, r3, #3
 8003efa:	3301      	adds	r3, #1
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f0a:	e002      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3750      	adds	r7, #80	; 0x50
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200

08003f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000010 	.word	0x20000010

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4903      	ldr	r1, [pc, #12]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	080062d8 	.word	0x080062d8

08003f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f70:	f7ff ffdc 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f74:	4602      	mov	r2, r0
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	4903      	ldr	r1, [pc, #12]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f82:	5ccb      	ldrb	r3, [r1, r3]
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	080062d8 	.word	0x080062d8

08003f94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e03f      	b.n	8004026 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7fd f8da 	bl	8001174 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	; 0x24
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68da      	ldr	r2, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fd7b 	bl	8004ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695a      	ldr	r2, [r3, #20]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800400c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b08a      	sub	sp, #40	; 0x28
 8004032:	af02      	add	r7, sp, #8
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b20      	cmp	r3, #32
 800404c:	d17c      	bne.n	8004148 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d002      	beq.n	800405a <HAL_UART_Transmit+0x2c>
 8004054:	88fb      	ldrh	r3, [r7, #6]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e075      	b.n	800414a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_UART_Transmit+0x3e>
 8004068:	2302      	movs	r3, #2
 800406a:	e06e      	b.n	800414a <HAL_UART_Transmit+0x11c>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2221      	movs	r2, #33	; 0x21
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004082:	f7fd fa65 	bl	8001550 <HAL_GetTick>
 8004086:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	88fa      	ldrh	r2, [r7, #6]
 800408c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	88fa      	ldrh	r2, [r7, #6]
 8004092:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d108      	bne.n	80040b0 <HAL_UART_Transmit+0x82>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	e003      	b.n	80040b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040c0:	e02a      	b.n	8004118 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	; 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 faf9 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e036      	b.n	800414a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	3302      	adds	r3, #2
 80040f6:	61bb      	str	r3, [r7, #24]
 80040f8:	e007      	b.n	800410a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3301      	adds	r3, #1
 8004108:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1cf      	bne.n	80040c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fac9 	bl	80046c4 <UART_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
	...

08004154 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b0ba      	sub	sp, #232	; 0xe8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10f      	bne.n	80041ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800419a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_UART_IRQHandler+0x66>
 80041a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fbd3 	bl	800495e <UART_Receive_IT>
      return;
 80041b8:	e256      	b.n	8004668 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f000 80de 	beq.w	8004380 <HAL_UART_IRQHandler+0x22c>
 80041c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 80d1 	beq.w	8004380 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00b      	beq.n	8004202 <HAL_UART_IRQHandler+0xae>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0201 	orr.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_UART_IRQHandler+0xd2>
 800420e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	f043 0202 	orr.w	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00b      	beq.n	800424a <HAL_UART_IRQHandler+0xf6>
 8004232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0204 	orr.w	r2, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800424a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d011      	beq.n	800427a <HAL_UART_IRQHandler+0x126>
 8004256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800425a:	f003 0320 	and.w	r3, r3, #32
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d005      	beq.n	800427a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f043 0208 	orr.w	r2, r3, #8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 81ed 	beq.w	800465e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_UART_IRQHandler+0x14e>
 8004290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 fb5e 	bl	800495e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b40      	cmp	r3, #64	; 0x40
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d103      	bne.n	80042ce <HAL_UART_IRQHandler+0x17a>
 80042c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d04f      	beq.n	800436e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa66 	bl	80047a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d141      	bne.n	8004366 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3314      	adds	r3, #20
 80042e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800430e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800431a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1d9      	bne.n	80042e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	2b00      	cmp	r3, #0
 8004334:	d013      	beq.n	800435e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	4a7d      	ldr	r2, [pc, #500]	; (8004530 <HAL_UART_IRQHandler+0x3dc>)
 800433c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe f8e8 	bl	8002518 <HAL_DMA_Abort_IT>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004358:	4610      	mov	r0, r2
 800435a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	e00e      	b.n	800437c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f99a 	bl	8004698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	e00a      	b.n	800437c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f996 	bl	8004698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800436c:	e006      	b.n	800437c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f992 	bl	8004698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800437a:	e170      	b.n	800465e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	bf00      	nop
    return;
 800437e:	e16e      	b.n	800465e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	2b01      	cmp	r3, #1
 8004386:	f040 814a 	bne.w	800461e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8143 	beq.w	800461e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 813c 	beq.w	800461e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043a6:	2300      	movs	r3, #0
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b40      	cmp	r3, #64	; 0x40
 80043c8:	f040 80b4 	bne.w	8004534 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8140 	beq.w	8004662 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ea:	429a      	cmp	r2, r3
 80043ec:	f080 8139 	bcs.w	8004662 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	f000 8088 	beq.w	8004516 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800441c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	330c      	adds	r3, #12
 800442e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004432:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800443e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800444a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1d9      	bne.n	8004406 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3314      	adds	r3, #20
 8004458:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004476:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800447a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800447e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004482:	e841 2300 	strex	r3, r2, [r1]
 8004486:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004488:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1e1      	bne.n	8004452 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3314      	adds	r3, #20
 8004494:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004496:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004498:	e853 3f00 	ldrex	r3, [r3]
 800449c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80044b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e3      	bne.n	800448e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	e853 3f00 	ldrex	r3, [r3]
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e6:	f023 0310 	bic.w	r3, r3, #16
 80044ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80044fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e3      	bne.n	80044d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	4618      	mov	r0, r3
 8004512:	f7fd ff91 	bl	8002438 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800451e:	b29b      	uxth	r3, r3
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f8c0 	bl	80046ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800452c:	e099      	b.n	8004662 <HAL_UART_IRQHandler+0x50e>
 800452e:	bf00      	nop
 8004530:	08004867 	.word	0x08004867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800453c:	b29b      	uxth	r3, r3
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 808b 	beq.w	8004666 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004550:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8086 	beq.w	8004666 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800456a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004570:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800457e:	647a      	str	r2, [r7, #68]	; 0x44
 8004580:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e3      	bne.n	800455a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3314      	adds	r3, #20
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	623b      	str	r3, [r7, #32]
   return(result);
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80045b6:	633a      	str	r2, [r7, #48]	; 0x30
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e3      	bne.n	8004592 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0310 	bic.w	r3, r3, #16
 80045ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045fc:	61fa      	str	r2, [r7, #28]
 80045fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	e841 2300 	strex	r3, r2, [r1]
 8004608:	617b      	str	r3, [r7, #20]
   return(result);
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1e3      	bne.n	80045d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004610:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004614:	4619      	mov	r1, r3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f848 	bl	80046ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800461c:	e023      	b.n	8004666 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <HAL_UART_IRQHandler+0x4ea>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f929 	bl	800488e <UART_Transmit_IT>
    return;
 800463c:	e014      	b.n	8004668 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00e      	beq.n	8004668 <HAL_UART_IRQHandler+0x514>
 800464a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f969 	bl	800492e <UART_EndTransmit_IT>
    return;
 800465c:	e004      	b.n	8004668 <HAL_UART_IRQHandler+0x514>
    return;
 800465e:	bf00      	nop
 8004660:	e002      	b.n	8004668 <HAL_UART_IRQHandler+0x514>
      return;
 8004662:	bf00      	nop
 8004664:	e000      	b.n	8004668 <HAL_UART_IRQHandler+0x514>
      return;
 8004666:	bf00      	nop
  }
}
 8004668:	37e8      	adds	r7, #232	; 0xe8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop

08004670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b090      	sub	sp, #64	; 0x40
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	603b      	str	r3, [r7, #0]
 80046d0:	4613      	mov	r3, r2
 80046d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046d4:	e050      	b.n	8004778 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046dc:	d04c      	beq.n	8004778 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046e4:	f7fc ff34 	bl	8001550 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d241      	bcs.n	8004778 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	330c      	adds	r3, #12
 8004712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004714:	637a      	str	r2, [r7, #52]	; 0x34
 8004716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3314      	adds	r3, #20
 800472e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	e853 3f00 	ldrex	r3, [r3]
 8004736:	613b      	str	r3, [r7, #16]
   return(result);
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f023 0301 	bic.w	r3, r3, #1
 800473e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3314      	adds	r3, #20
 8004746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004748:	623a      	str	r2, [r7, #32]
 800474a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	69f9      	ldr	r1, [r7, #28]
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	e841 2300 	strex	r3, r2, [r1]
 8004754:	61bb      	str	r3, [r7, #24]
   return(result);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e5      	bne.n	8004728 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e00f      	b.n	8004798 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4013      	ands	r3, r2
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	bf0c      	ite	eq
 8004788:	2301      	moveq	r3, #1
 800478a:	2300      	movne	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	461a      	mov	r2, r3
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	429a      	cmp	r2, r3
 8004794:	d09f      	beq.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3740      	adds	r7, #64	; 0x40
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b095      	sub	sp, #84	; 0x54
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	330c      	adds	r3, #12
 80047c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047c8:	643a      	str	r2, [r7, #64]	; 0x40
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e5      	bne.n	80047a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3314      	adds	r3, #20
 80047e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	e853 3f00 	ldrex	r3, [r3]
 80047ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f023 0301 	bic.w	r3, r3, #1
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3314      	adds	r3, #20
 80047fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004804:	e841 2300 	strex	r3, r2, [r1]
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1e5      	bne.n	80047dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	2b01      	cmp	r3, #1
 8004816:	d119      	bne.n	800484c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	60bb      	str	r3, [r7, #8]
   return(result);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f023 0310 	bic.w	r3, r3, #16
 800482e:	647b      	str	r3, [r7, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004838:	61ba      	str	r2, [r7, #24]
 800483a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	613b      	str	r3, [r7, #16]
   return(result);
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e5      	bne.n	8004818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800485a:	bf00      	nop
 800485c:	3754      	adds	r7, #84	; 0x54
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7ff ff09 	bl	8004698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b21      	cmp	r3, #33	; 0x21
 80048a0:	d13e      	bne.n	8004920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048aa:	d114      	bne.n	80048d6 <UART_Transmit_IT+0x48>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d110      	bne.n	80048d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	621a      	str	r2, [r3, #32]
 80048d4:	e008      	b.n	80048e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	1c59      	adds	r1, r3, #1
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6211      	str	r1, [r2, #32]
 80048e0:	781a      	ldrb	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4619      	mov	r1, r3
 80048f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800490a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800491a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	e000      	b.n	8004922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004920:	2302      	movs	r3, #2
  }
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b082      	sub	sp, #8
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fe8e 	bl	8004670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b08c      	sub	sp, #48	; 0x30
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b22      	cmp	r3, #34	; 0x22
 8004970:	f040 80ab 	bne.w	8004aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497c:	d117      	bne.n	80049ae <UART_Receive_IT+0x50>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d113      	bne.n	80049ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004986:	2300      	movs	r3, #0
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	b29a      	uxth	r2, r3
 800499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	1c9a      	adds	r2, r3, #2
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
 80049ac:	e026      	b.n	80049fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c0:	d007      	beq.n	80049d2 <UART_Receive_IT+0x74>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10a      	bne.n	80049e0 <UART_Receive_IT+0x82>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d106      	bne.n	80049e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	e008      	b.n	80049f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	3b01      	subs	r3, #1
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4619      	mov	r1, r3
 8004a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d15a      	bne.n	8004ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0220 	bic.w	r2, r2, #32
 8004a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68da      	ldr	r2, [r3, #12]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d135      	bne.n	8004abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	613b      	str	r3, [r7, #16]
   return(result);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	f023 0310 	bic.w	r3, r3, #16
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a76:	623a      	str	r2, [r7, #32]
 8004a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7a:	69f9      	ldr	r1, [r7, #28]
 8004a7c:	6a3a      	ldr	r2, [r7, #32]
 8004a7e:	e841 2300 	strex	r3, r2, [r1]
 8004a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1e5      	bne.n	8004a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d10a      	bne.n	8004aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f7ff fdf9 	bl	80046ac <HAL_UARTEx_RxEventCallback>
 8004aba:	e002      	b.n	8004ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff fde1 	bl	8004684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e002      	b.n	8004acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e000      	b.n	8004acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004aca:	2302      	movs	r3, #2
  }
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3730      	adds	r7, #48	; 0x30
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b0c0      	sub	sp, #256	; 0x100
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af0:	68d9      	ldr	r1, [r3, #12]
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	ea40 0301 	orr.w	r3, r0, r1
 8004afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b2c:	f021 010c 	bic.w	r1, r1, #12
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4e:	6999      	ldr	r1, [r3, #24]
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	ea40 0301 	orr.w	r3, r0, r1
 8004b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8f      	ldr	r3, [pc, #572]	; (8004da0 <UART_SetConfig+0x2cc>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d005      	beq.n	8004b74 <UART_SetConfig+0xa0>
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8d      	ldr	r3, [pc, #564]	; (8004da4 <UART_SetConfig+0x2d0>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d104      	bne.n	8004b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7ff f9fa 	bl	8003f6c <HAL_RCC_GetPCLK2Freq>
 8004b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b7c:	e003      	b.n	8004b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b7e:	f7ff f9e1 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8004b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b90:	f040 810c 	bne.w	8004dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	462b      	mov	r3, r5
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	eb12 0801 	adds.w	r8, r2, r1
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	eb43 0901 	adc.w	r9, r3, r1
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	4699      	mov	r9, r3
 8004bda:	4623      	mov	r3, r4
 8004bdc:	eb18 0303 	adds.w	r3, r8, r3
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004be4:	462b      	mov	r3, r5
 8004be6:	eb49 0303 	adc.w	r3, r9, r3
 8004bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c02:	460b      	mov	r3, r1
 8004c04:	18db      	adds	r3, r3, r3
 8004c06:	653b      	str	r3, [r7, #80]	; 0x50
 8004c08:	4613      	mov	r3, r2
 8004c0a:	eb42 0303 	adc.w	r3, r2, r3
 8004c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c18:	f7fb fb32 	bl	8000280 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b61      	ldr	r3, [pc, #388]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011c      	lsls	r4, r3, #4
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c44:	415b      	adcs	r3, r3
 8004c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb43 0b01 	adc.w	fp, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c6c:	4692      	mov	sl, r2
 8004c6e:	469b      	mov	fp, r3
 8004c70:	4643      	mov	r3, r8
 8004c72:	eb1a 0303 	adds.w	r3, sl, r3
 8004c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	18db      	adds	r3, r3, r3
 8004c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cae:	f7fb fae7 	bl	8000280 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004cba:	fba3 2301 	umull	r2, r3, r3, r1
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2264      	movs	r2, #100	; 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	1acb      	subs	r3, r1, r3
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cdc:	441c      	add	r4, r3
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d00:	4641      	mov	r1, r8
 8004d02:	1851      	adds	r1, r2, r1
 8004d04:	6339      	str	r1, [r7, #48]	; 0x30
 8004d06:	4649      	mov	r1, r9
 8004d08:	414b      	adcs	r3, r1
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d18:	4659      	mov	r1, fp
 8004d1a:	00cb      	lsls	r3, r1, #3
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d22:	4651      	mov	r1, sl
 8004d24:	00ca      	lsls	r2, r1, #3
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d34:	464b      	mov	r3, r9
 8004d36:	460a      	mov	r2, r1
 8004d38:	eb42 0303 	adc.w	r3, r2, r3
 8004d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d54:	460b      	mov	r3, r1
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d6a:	f7fb fa89 	bl	8000280 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004d74:	fba3 1302 	umull	r1, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	2164      	movs	r1, #100	; 0x64
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	3332      	adds	r3, #50	; 0x32
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <UART_SetConfig+0x2d4>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 0207 	and.w	r2, r3, #7
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4422      	add	r2, r4
 8004d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d9c:	e106      	b.n	8004fac <UART_SetConfig+0x4d8>
 8004d9e:	bf00      	nop
 8004da0:	40011000 	.word	0x40011000
 8004da4:	40011400 	.word	0x40011400
 8004da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	6239      	str	r1, [r7, #32]
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dce:	4641      	mov	r1, r8
 8004dd0:	1854      	adds	r4, r2, r1
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	eb43 0501 	adc.w	r5, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	00eb      	lsls	r3, r5, #3
 8004de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de6:	00e2      	lsls	r2, r4, #3
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	18e3      	adds	r3, r4, r3
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004df4:	464b      	mov	r3, r9
 8004df6:	eb45 0303 	adc.w	r3, r5, r3
 8004dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	008b      	lsls	r3, r1, #2
 8004e1e:	4621      	mov	r1, r4
 8004e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e24:	4621      	mov	r1, r4
 8004e26:	008a      	lsls	r2, r1, #2
 8004e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e2c:	f7fb fa28 	bl	8000280 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b60      	ldr	r3, [pc, #384]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011c      	lsls	r4, r3, #4
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	61b9      	str	r1, [r7, #24]
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e60:	4641      	mov	r1, r8
 8004e62:	1851      	adds	r1, r2, r1
 8004e64:	6139      	str	r1, [r7, #16]
 8004e66:	4649      	mov	r1, r9
 8004e68:	414b      	adcs	r3, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e78:	4659      	mov	r1, fp
 8004e7a:	00cb      	lsls	r3, r1, #3
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e82:	4651      	mov	r1, sl
 8004e84:	00ca      	lsls	r2, r1, #3
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e94:	464b      	mov	r3, r9
 8004e96:	460a      	mov	r2, r1
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eb8:	4649      	mov	r1, r9
 8004eba:	008b      	lsls	r3, r1, #2
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	008a      	lsls	r2, r1, #2
 8004ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004eca:	f7fb f9d9 	bl	8000280 <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4b38      	ldr	r3, [pc, #224]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2264      	movs	r2, #100	; 0x64
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	1acb      	subs	r3, r1, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	; 0x32
 8004ee8:	4a33      	ldr	r2, [pc, #204]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	673b      	str	r3, [r7, #112]	; 0x70
 8004efe:	677a      	str	r2, [r7, #116]	; 0x74
 8004f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f46:	464b      	mov	r3, r9
 8004f48:	460a      	mov	r2, r1
 8004f4a:	eb42 0303 	adc.w	r3, r2, r3
 8004f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	663b      	str	r3, [r7, #96]	; 0x60
 8004f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f68:	4649      	mov	r1, r9
 8004f6a:	008b      	lsls	r3, r1, #2
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f72:	4641      	mov	r1, r8
 8004f74:	008a      	lsls	r2, r1, #2
 8004f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f7a:	f7fb f981 	bl	8000280 <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2164      	movs	r1, #100	; 0x64
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	3332      	adds	r3, #50	; 0x32
 8004f96:	4a08      	ldr	r2, [pc, #32]	; (8004fb8 <UART_SetConfig+0x4e4>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 020f 	and.w	r2, r3, #15
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4422      	add	r2, r4
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb8:	51eb851f 	.word	0x51eb851f

08004fbc <std>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fca:	6083      	str	r3, [r0, #8]
 8004fcc:	8181      	strh	r1, [r0, #12]
 8004fce:	6643      	str	r3, [r0, #100]	; 0x64
 8004fd0:	81c2      	strh	r2, [r0, #14]
 8004fd2:	6183      	str	r3, [r0, #24]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	305c      	adds	r0, #92	; 0x5c
 8004fda:	f000 f926 	bl	800522a <memset>
 8004fde:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <std+0x58>)
 8004fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	; (8005018 <std+0x5c>)
 8004fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	; (800501c <std+0x60>)
 8004fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004fea:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <std+0x64>)
 8004fec:	6323      	str	r3, [r4, #48]	; 0x30
 8004fee:	4b0d      	ldr	r3, [pc, #52]	; (8005024 <std+0x68>)
 8004ff0:	6224      	str	r4, [r4, #32]
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d006      	beq.n	8005004 <std+0x48>
 8004ff6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ffa:	4294      	cmp	r4, r2
 8004ffc:	d002      	beq.n	8005004 <std+0x48>
 8004ffe:	33d0      	adds	r3, #208	; 0xd0
 8005000:	429c      	cmp	r4, r3
 8005002:	d105      	bne.n	8005010 <std+0x54>
 8005004:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 b986 	b.w	800531c <__retarget_lock_init_recursive>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	080051a5 	.word	0x080051a5
 8005018:	080051c7 	.word	0x080051c7
 800501c:	080051ff 	.word	0x080051ff
 8005020:	08005223 	.word	0x08005223
 8005024:	20000200 	.word	0x20000200

08005028 <stdio_exit_handler>:
 8005028:	4a02      	ldr	r2, [pc, #8]	; (8005034 <stdio_exit_handler+0xc>)
 800502a:	4903      	ldr	r1, [pc, #12]	; (8005038 <stdio_exit_handler+0x10>)
 800502c:	4803      	ldr	r0, [pc, #12]	; (800503c <stdio_exit_handler+0x14>)
 800502e:	f000 b869 	b.w	8005104 <_fwalk_sglue>
 8005032:	bf00      	nop
 8005034:	2000001c 	.word	0x2000001c
 8005038:	08005e79 	.word	0x08005e79
 800503c:	20000028 	.word	0x20000028

08005040 <cleanup_stdio>:
 8005040:	6841      	ldr	r1, [r0, #4]
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <cleanup_stdio+0x34>)
 8005044:	4299      	cmp	r1, r3
 8005046:	b510      	push	{r4, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	d001      	beq.n	8005050 <cleanup_stdio+0x10>
 800504c:	f000 ff14 	bl	8005e78 <_fflush_r>
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <cleanup_stdio+0x38>)
 8005054:	4299      	cmp	r1, r3
 8005056:	d002      	beq.n	800505e <cleanup_stdio+0x1e>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 ff0d 	bl	8005e78 <_fflush_r>
 800505e:	68e1      	ldr	r1, [r4, #12]
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <cleanup_stdio+0x3c>)
 8005062:	4299      	cmp	r1, r3
 8005064:	d004      	beq.n	8005070 <cleanup_stdio+0x30>
 8005066:	4620      	mov	r0, r4
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f000 bf04 	b.w	8005e78 <_fflush_r>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	20000200 	.word	0x20000200
 8005078:	20000268 	.word	0x20000268
 800507c:	200002d0 	.word	0x200002d0

08005080 <global_stdio_init.part.0>:
 8005080:	b510      	push	{r4, lr}
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <global_stdio_init.part.0+0x30>)
 8005084:	4c0b      	ldr	r4, [pc, #44]	; (80050b4 <global_stdio_init.part.0+0x34>)
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <global_stdio_init.part.0+0x38>)
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	4620      	mov	r0, r4
 800508c:	2200      	movs	r2, #0
 800508e:	2104      	movs	r1, #4
 8005090:	f7ff ff94 	bl	8004fbc <std>
 8005094:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005098:	2201      	movs	r2, #1
 800509a:	2109      	movs	r1, #9
 800509c:	f7ff ff8e 	bl	8004fbc <std>
 80050a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050a4:	2202      	movs	r2, #2
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	2112      	movs	r1, #18
 80050ac:	f7ff bf86 	b.w	8004fbc <std>
 80050b0:	20000338 	.word	0x20000338
 80050b4:	20000200 	.word	0x20000200
 80050b8:	08005029 	.word	0x08005029

080050bc <__sfp_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__sfp_lock_acquire+0x8>)
 80050be:	f000 b92e 	b.w	800531e <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000341 	.word	0x20000341

080050c8 <__sfp_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	; (80050d0 <__sfp_lock_release+0x8>)
 80050ca:	f000 b929 	b.w	8005320 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	20000341 	.word	0x20000341

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sfp_lock_acquire>
 80050dc:	6a23      	ldr	r3, [r4, #32]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sfp_lock_release>
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <__sinit+0x28>)
 80050ea:	6223      	str	r3, [r4, #32]
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <__sinit+0x2c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f5      	bne.n	80050e0 <__sinit+0xc>
 80050f4:	f7ff ffc4 	bl	8005080 <global_stdio_init.part.0>
 80050f8:	e7f2      	b.n	80050e0 <__sinit+0xc>
 80050fa:	bf00      	nop
 80050fc:	08005041 	.word	0x08005041
 8005100:	20000338 	.word	0x20000338

08005104 <_fwalk_sglue>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4607      	mov	r7, r0
 800510a:	4688      	mov	r8, r1
 800510c:	4614      	mov	r4, r2
 800510e:	2600      	movs	r6, #0
 8005110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005114:	f1b9 0901 	subs.w	r9, r9, #1
 8005118:	d505      	bpl.n	8005126 <_fwalk_sglue+0x22>
 800511a:	6824      	ldr	r4, [r4, #0]
 800511c:	2c00      	cmp	r4, #0
 800511e:	d1f7      	bne.n	8005110 <_fwalk_sglue+0xc>
 8005120:	4630      	mov	r0, r6
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d907      	bls.n	800513c <_fwalk_sglue+0x38>
 800512c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005130:	3301      	adds	r3, #1
 8005132:	d003      	beq.n	800513c <_fwalk_sglue+0x38>
 8005134:	4629      	mov	r1, r5
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	4306      	orrs	r6, r0
 800513c:	3568      	adds	r5, #104	; 0x68
 800513e:	e7e9      	b.n	8005114 <_fwalk_sglue+0x10>

08005140 <iprintf>:
 8005140:	b40f      	push	{r0, r1, r2, r3}
 8005142:	b507      	push	{r0, r1, r2, lr}
 8005144:	4906      	ldr	r1, [pc, #24]	; (8005160 <iprintf+0x20>)
 8005146:	ab04      	add	r3, sp, #16
 8005148:	6808      	ldr	r0, [r1, #0]
 800514a:	f853 2b04 	ldr.w	r2, [r3], #4
 800514e:	6881      	ldr	r1, [r0, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	f000 fb61 	bl	8005818 <_vfiprintf_r>
 8005156:	b003      	add	sp, #12
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	20000074 	.word	0x20000074

08005164 <siprintf>:
 8005164:	b40e      	push	{r1, r2, r3}
 8005166:	b500      	push	{lr}
 8005168:	b09c      	sub	sp, #112	; 0x70
 800516a:	ab1d      	add	r3, sp, #116	; 0x74
 800516c:	9002      	str	r0, [sp, #8]
 800516e:	9006      	str	r0, [sp, #24]
 8005170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005174:	4809      	ldr	r0, [pc, #36]	; (800519c <siprintf+0x38>)
 8005176:	9107      	str	r1, [sp, #28]
 8005178:	9104      	str	r1, [sp, #16]
 800517a:	4909      	ldr	r1, [pc, #36]	; (80051a0 <siprintf+0x3c>)
 800517c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005180:	9105      	str	r1, [sp, #20]
 8005182:	6800      	ldr	r0, [r0, #0]
 8005184:	9301      	str	r3, [sp, #4]
 8005186:	a902      	add	r1, sp, #8
 8005188:	f000 fa1e 	bl	80055c8 <_svfiprintf_r>
 800518c:	9b02      	ldr	r3, [sp, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	b01c      	add	sp, #112	; 0x70
 8005194:	f85d eb04 	ldr.w	lr, [sp], #4
 8005198:	b003      	add	sp, #12
 800519a:	4770      	bx	lr
 800519c:	20000074 	.word	0x20000074
 80051a0:	ffff0208 	.word	0xffff0208

080051a4 <__sread>:
 80051a4:	b510      	push	{r4, lr}
 80051a6:	460c      	mov	r4, r1
 80051a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ac:	f000 f868 	bl	8005280 <_read_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	bfab      	itete	ge
 80051b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051b6:	89a3      	ldrhlt	r3, [r4, #12]
 80051b8:	181b      	addge	r3, r3, r0
 80051ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051be:	bfac      	ite	ge
 80051c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80051c2:	81a3      	strhlt	r3, [r4, #12]
 80051c4:	bd10      	pop	{r4, pc}

080051c6 <__swrite>:
 80051c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ca:	461f      	mov	r7, r3
 80051cc:	898b      	ldrh	r3, [r1, #12]
 80051ce:	05db      	lsls	r3, r3, #23
 80051d0:	4605      	mov	r5, r0
 80051d2:	460c      	mov	r4, r1
 80051d4:	4616      	mov	r6, r2
 80051d6:	d505      	bpl.n	80051e4 <__swrite+0x1e>
 80051d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051dc:	2302      	movs	r3, #2
 80051de:	2200      	movs	r2, #0
 80051e0:	f000 f83c 	bl	800525c <_lseek_r>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	4632      	mov	r2, r6
 80051f2:	463b      	mov	r3, r7
 80051f4:	4628      	mov	r0, r5
 80051f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	f000 b853 	b.w	80052a4 <_write_r>

080051fe <__sseek>:
 80051fe:	b510      	push	{r4, lr}
 8005200:	460c      	mov	r4, r1
 8005202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005206:	f000 f829 	bl	800525c <_lseek_r>
 800520a:	1c43      	adds	r3, r0, #1
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	bf15      	itete	ne
 8005210:	6560      	strne	r0, [r4, #84]	; 0x54
 8005212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800521a:	81a3      	strheq	r3, [r4, #12]
 800521c:	bf18      	it	ne
 800521e:	81a3      	strhne	r3, [r4, #12]
 8005220:	bd10      	pop	{r4, pc}

08005222 <__sclose>:
 8005222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005226:	f000 b809 	b.w	800523c <_close_r>

0800522a <memset>:
 800522a:	4402      	add	r2, r0
 800522c:	4603      	mov	r3, r0
 800522e:	4293      	cmp	r3, r2
 8005230:	d100      	bne.n	8005234 <memset+0xa>
 8005232:	4770      	bx	lr
 8005234:	f803 1b01 	strb.w	r1, [r3], #1
 8005238:	e7f9      	b.n	800522e <memset+0x4>
	...

0800523c <_close_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d06      	ldr	r5, [pc, #24]	; (8005258 <_close_r+0x1c>)
 8005240:	2300      	movs	r3, #0
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fc f875 	bl	8001336 <_close>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_close_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_close_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	2000033c 	.word	0x2000033c

0800525c <_lseek_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4d07      	ldr	r5, [pc, #28]	; (800527c <_lseek_r+0x20>)
 8005260:	4604      	mov	r4, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	602a      	str	r2, [r5, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fc f88a 	bl	8001384 <_lseek>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_lseek_r+0x1e>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_lseek_r+0x1e>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	2000033c 	.word	0x2000033c

08005280 <_read_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4d07      	ldr	r5, [pc, #28]	; (80052a0 <_read_r+0x20>)
 8005284:	4604      	mov	r4, r0
 8005286:	4608      	mov	r0, r1
 8005288:	4611      	mov	r1, r2
 800528a:	2200      	movs	r2, #0
 800528c:	602a      	str	r2, [r5, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	f7fc f818 	bl	80012c4 <_read>
 8005294:	1c43      	adds	r3, r0, #1
 8005296:	d102      	bne.n	800529e <_read_r+0x1e>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	b103      	cbz	r3, 800529e <_read_r+0x1e>
 800529c:	6023      	str	r3, [r4, #0]
 800529e:	bd38      	pop	{r3, r4, r5, pc}
 80052a0:	2000033c 	.word	0x2000033c

080052a4 <_write_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	4d07      	ldr	r5, [pc, #28]	; (80052c4 <_write_r+0x20>)
 80052a8:	4604      	mov	r4, r0
 80052aa:	4608      	mov	r0, r1
 80052ac:	4611      	mov	r1, r2
 80052ae:	2200      	movs	r2, #0
 80052b0:	602a      	str	r2, [r5, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f7fc f823 	bl	80012fe <_write>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_write_r+0x1e>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_write_r+0x1e>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	2000033c 	.word	0x2000033c

080052c8 <__errno>:
 80052c8:	4b01      	ldr	r3, [pc, #4]	; (80052d0 <__errno+0x8>)
 80052ca:	6818      	ldr	r0, [r3, #0]
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000074 	.word	0x20000074

080052d4 <__libc_init_array>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	4d0d      	ldr	r5, [pc, #52]	; (800530c <__libc_init_array+0x38>)
 80052d8:	4c0d      	ldr	r4, [pc, #52]	; (8005310 <__libc_init_array+0x3c>)
 80052da:	1b64      	subs	r4, r4, r5
 80052dc:	10a4      	asrs	r4, r4, #2
 80052de:	2600      	movs	r6, #0
 80052e0:	42a6      	cmp	r6, r4
 80052e2:	d109      	bne.n	80052f8 <__libc_init_array+0x24>
 80052e4:	4d0b      	ldr	r5, [pc, #44]	; (8005314 <__libc_init_array+0x40>)
 80052e6:	4c0c      	ldr	r4, [pc, #48]	; (8005318 <__libc_init_array+0x44>)
 80052e8:	f000 ff78 	bl	80061dc <_init>
 80052ec:	1b64      	subs	r4, r4, r5
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	2600      	movs	r6, #0
 80052f2:	42a6      	cmp	r6, r4
 80052f4:	d105      	bne.n	8005302 <__libc_init_array+0x2e>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052fc:	4798      	blx	r3
 80052fe:	3601      	adds	r6, #1
 8005300:	e7ee      	b.n	80052e0 <__libc_init_array+0xc>
 8005302:	f855 3b04 	ldr.w	r3, [r5], #4
 8005306:	4798      	blx	r3
 8005308:	3601      	adds	r6, #1
 800530a:	e7f2      	b.n	80052f2 <__libc_init_array+0x1e>
 800530c:	08006324 	.word	0x08006324
 8005310:	08006324 	.word	0x08006324
 8005314:	08006324 	.word	0x08006324
 8005318:	08006328 	.word	0x08006328

0800531c <__retarget_lock_init_recursive>:
 800531c:	4770      	bx	lr

0800531e <__retarget_lock_acquire_recursive>:
 800531e:	4770      	bx	lr

08005320 <__retarget_lock_release_recursive>:
 8005320:	4770      	bx	lr
	...

08005324 <_free_r>:
 8005324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005326:	2900      	cmp	r1, #0
 8005328:	d044      	beq.n	80053b4 <_free_r+0x90>
 800532a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800532e:	9001      	str	r0, [sp, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f1a1 0404 	sub.w	r4, r1, #4
 8005336:	bfb8      	it	lt
 8005338:	18e4      	addlt	r4, r4, r3
 800533a:	f000 f8df 	bl	80054fc <__malloc_lock>
 800533e:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <_free_r+0x94>)
 8005340:	9801      	ldr	r0, [sp, #4]
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	b933      	cbnz	r3, 8005354 <_free_r+0x30>
 8005346:	6063      	str	r3, [r4, #4]
 8005348:	6014      	str	r4, [r2, #0]
 800534a:	b003      	add	sp, #12
 800534c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005350:	f000 b8da 	b.w	8005508 <__malloc_unlock>
 8005354:	42a3      	cmp	r3, r4
 8005356:	d908      	bls.n	800536a <_free_r+0x46>
 8005358:	6825      	ldr	r5, [r4, #0]
 800535a:	1961      	adds	r1, r4, r5
 800535c:	428b      	cmp	r3, r1
 800535e:	bf01      	itttt	eq
 8005360:	6819      	ldreq	r1, [r3, #0]
 8005362:	685b      	ldreq	r3, [r3, #4]
 8005364:	1949      	addeq	r1, r1, r5
 8005366:	6021      	streq	r1, [r4, #0]
 8005368:	e7ed      	b.n	8005346 <_free_r+0x22>
 800536a:	461a      	mov	r2, r3
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	b10b      	cbz	r3, 8005374 <_free_r+0x50>
 8005370:	42a3      	cmp	r3, r4
 8005372:	d9fa      	bls.n	800536a <_free_r+0x46>
 8005374:	6811      	ldr	r1, [r2, #0]
 8005376:	1855      	adds	r5, r2, r1
 8005378:	42a5      	cmp	r5, r4
 800537a:	d10b      	bne.n	8005394 <_free_r+0x70>
 800537c:	6824      	ldr	r4, [r4, #0]
 800537e:	4421      	add	r1, r4
 8005380:	1854      	adds	r4, r2, r1
 8005382:	42a3      	cmp	r3, r4
 8005384:	6011      	str	r1, [r2, #0]
 8005386:	d1e0      	bne.n	800534a <_free_r+0x26>
 8005388:	681c      	ldr	r4, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	6053      	str	r3, [r2, #4]
 800538e:	440c      	add	r4, r1
 8005390:	6014      	str	r4, [r2, #0]
 8005392:	e7da      	b.n	800534a <_free_r+0x26>
 8005394:	d902      	bls.n	800539c <_free_r+0x78>
 8005396:	230c      	movs	r3, #12
 8005398:	6003      	str	r3, [r0, #0]
 800539a:	e7d6      	b.n	800534a <_free_r+0x26>
 800539c:	6825      	ldr	r5, [r4, #0]
 800539e:	1961      	adds	r1, r4, r5
 80053a0:	428b      	cmp	r3, r1
 80053a2:	bf04      	itt	eq
 80053a4:	6819      	ldreq	r1, [r3, #0]
 80053a6:	685b      	ldreq	r3, [r3, #4]
 80053a8:	6063      	str	r3, [r4, #4]
 80053aa:	bf04      	itt	eq
 80053ac:	1949      	addeq	r1, r1, r5
 80053ae:	6021      	streq	r1, [r4, #0]
 80053b0:	6054      	str	r4, [r2, #4]
 80053b2:	e7ca      	b.n	800534a <_free_r+0x26>
 80053b4:	b003      	add	sp, #12
 80053b6:	bd30      	pop	{r4, r5, pc}
 80053b8:	20000344 	.word	0x20000344

080053bc <sbrk_aligned>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4e0e      	ldr	r6, [pc, #56]	; (80053f8 <sbrk_aligned+0x3c>)
 80053c0:	460c      	mov	r4, r1
 80053c2:	6831      	ldr	r1, [r6, #0]
 80053c4:	4605      	mov	r5, r0
 80053c6:	b911      	cbnz	r1, 80053ce <sbrk_aligned+0x12>
 80053c8:	f000 fe2e 	bl	8006028 <_sbrk_r>
 80053cc:	6030      	str	r0, [r6, #0]
 80053ce:	4621      	mov	r1, r4
 80053d0:	4628      	mov	r0, r5
 80053d2:	f000 fe29 	bl	8006028 <_sbrk_r>
 80053d6:	1c43      	adds	r3, r0, #1
 80053d8:	d00a      	beq.n	80053f0 <sbrk_aligned+0x34>
 80053da:	1cc4      	adds	r4, r0, #3
 80053dc:	f024 0403 	bic.w	r4, r4, #3
 80053e0:	42a0      	cmp	r0, r4
 80053e2:	d007      	beq.n	80053f4 <sbrk_aligned+0x38>
 80053e4:	1a21      	subs	r1, r4, r0
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fe1e 	bl	8006028 <_sbrk_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d101      	bne.n	80053f4 <sbrk_aligned+0x38>
 80053f0:	f04f 34ff 	mov.w	r4, #4294967295
 80053f4:	4620      	mov	r0, r4
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	20000348 	.word	0x20000348

080053fc <_malloc_r>:
 80053fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005400:	1ccd      	adds	r5, r1, #3
 8005402:	f025 0503 	bic.w	r5, r5, #3
 8005406:	3508      	adds	r5, #8
 8005408:	2d0c      	cmp	r5, #12
 800540a:	bf38      	it	cc
 800540c:	250c      	movcc	r5, #12
 800540e:	2d00      	cmp	r5, #0
 8005410:	4607      	mov	r7, r0
 8005412:	db01      	blt.n	8005418 <_malloc_r+0x1c>
 8005414:	42a9      	cmp	r1, r5
 8005416:	d905      	bls.n	8005424 <_malloc_r+0x28>
 8005418:	230c      	movs	r3, #12
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	2600      	movs	r6, #0
 800541e:	4630      	mov	r0, r6
 8005420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054f8 <_malloc_r+0xfc>
 8005428:	f000 f868 	bl	80054fc <__malloc_lock>
 800542c:	f8d8 3000 	ldr.w	r3, [r8]
 8005430:	461c      	mov	r4, r3
 8005432:	bb5c      	cbnz	r4, 800548c <_malloc_r+0x90>
 8005434:	4629      	mov	r1, r5
 8005436:	4638      	mov	r0, r7
 8005438:	f7ff ffc0 	bl	80053bc <sbrk_aligned>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	4604      	mov	r4, r0
 8005440:	d155      	bne.n	80054ee <_malloc_r+0xf2>
 8005442:	f8d8 4000 	ldr.w	r4, [r8]
 8005446:	4626      	mov	r6, r4
 8005448:	2e00      	cmp	r6, #0
 800544a:	d145      	bne.n	80054d8 <_malloc_r+0xdc>
 800544c:	2c00      	cmp	r4, #0
 800544e:	d048      	beq.n	80054e2 <_malloc_r+0xe6>
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	4631      	mov	r1, r6
 8005454:	4638      	mov	r0, r7
 8005456:	eb04 0903 	add.w	r9, r4, r3
 800545a:	f000 fde5 	bl	8006028 <_sbrk_r>
 800545e:	4581      	cmp	r9, r0
 8005460:	d13f      	bne.n	80054e2 <_malloc_r+0xe6>
 8005462:	6821      	ldr	r1, [r4, #0]
 8005464:	1a6d      	subs	r5, r5, r1
 8005466:	4629      	mov	r1, r5
 8005468:	4638      	mov	r0, r7
 800546a:	f7ff ffa7 	bl	80053bc <sbrk_aligned>
 800546e:	3001      	adds	r0, #1
 8005470:	d037      	beq.n	80054e2 <_malloc_r+0xe6>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	442b      	add	r3, r5
 8005476:	6023      	str	r3, [r4, #0]
 8005478:	f8d8 3000 	ldr.w	r3, [r8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d038      	beq.n	80054f2 <_malloc_r+0xf6>
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	42a2      	cmp	r2, r4
 8005484:	d12b      	bne.n	80054de <_malloc_r+0xe2>
 8005486:	2200      	movs	r2, #0
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e00f      	b.n	80054ac <_malloc_r+0xb0>
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	1b52      	subs	r2, r2, r5
 8005490:	d41f      	bmi.n	80054d2 <_malloc_r+0xd6>
 8005492:	2a0b      	cmp	r2, #11
 8005494:	d917      	bls.n	80054c6 <_malloc_r+0xca>
 8005496:	1961      	adds	r1, r4, r5
 8005498:	42a3      	cmp	r3, r4
 800549a:	6025      	str	r5, [r4, #0]
 800549c:	bf18      	it	ne
 800549e:	6059      	strne	r1, [r3, #4]
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	bf08      	it	eq
 80054a4:	f8c8 1000 	streq.w	r1, [r8]
 80054a8:	5162      	str	r2, [r4, r5]
 80054aa:	604b      	str	r3, [r1, #4]
 80054ac:	4638      	mov	r0, r7
 80054ae:	f104 060b 	add.w	r6, r4, #11
 80054b2:	f000 f829 	bl	8005508 <__malloc_unlock>
 80054b6:	f026 0607 	bic.w	r6, r6, #7
 80054ba:	1d23      	adds	r3, r4, #4
 80054bc:	1af2      	subs	r2, r6, r3
 80054be:	d0ae      	beq.n	800541e <_malloc_r+0x22>
 80054c0:	1b9b      	subs	r3, r3, r6
 80054c2:	50a3      	str	r3, [r4, r2]
 80054c4:	e7ab      	b.n	800541e <_malloc_r+0x22>
 80054c6:	42a3      	cmp	r3, r4
 80054c8:	6862      	ldr	r2, [r4, #4]
 80054ca:	d1dd      	bne.n	8005488 <_malloc_r+0x8c>
 80054cc:	f8c8 2000 	str.w	r2, [r8]
 80054d0:	e7ec      	b.n	80054ac <_malloc_r+0xb0>
 80054d2:	4623      	mov	r3, r4
 80054d4:	6864      	ldr	r4, [r4, #4]
 80054d6:	e7ac      	b.n	8005432 <_malloc_r+0x36>
 80054d8:	4634      	mov	r4, r6
 80054da:	6876      	ldr	r6, [r6, #4]
 80054dc:	e7b4      	b.n	8005448 <_malloc_r+0x4c>
 80054de:	4613      	mov	r3, r2
 80054e0:	e7cc      	b.n	800547c <_malloc_r+0x80>
 80054e2:	230c      	movs	r3, #12
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4638      	mov	r0, r7
 80054e8:	f000 f80e 	bl	8005508 <__malloc_unlock>
 80054ec:	e797      	b.n	800541e <_malloc_r+0x22>
 80054ee:	6025      	str	r5, [r4, #0]
 80054f0:	e7dc      	b.n	80054ac <_malloc_r+0xb0>
 80054f2:	605b      	str	r3, [r3, #4]
 80054f4:	deff      	udf	#255	; 0xff
 80054f6:	bf00      	nop
 80054f8:	20000344 	.word	0x20000344

080054fc <__malloc_lock>:
 80054fc:	4801      	ldr	r0, [pc, #4]	; (8005504 <__malloc_lock+0x8>)
 80054fe:	f7ff bf0e 	b.w	800531e <__retarget_lock_acquire_recursive>
 8005502:	bf00      	nop
 8005504:	20000340 	.word	0x20000340

08005508 <__malloc_unlock>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__malloc_unlock+0x8>)
 800550a:	f7ff bf09 	b.w	8005320 <__retarget_lock_release_recursive>
 800550e:	bf00      	nop
 8005510:	20000340 	.word	0x20000340

08005514 <__ssputs_r>:
 8005514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	688e      	ldr	r6, [r1, #8]
 800551a:	461f      	mov	r7, r3
 800551c:	42be      	cmp	r6, r7
 800551e:	680b      	ldr	r3, [r1, #0]
 8005520:	4682      	mov	sl, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4690      	mov	r8, r2
 8005526:	d82c      	bhi.n	8005582 <__ssputs_r+0x6e>
 8005528:	898a      	ldrh	r2, [r1, #12]
 800552a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800552e:	d026      	beq.n	800557e <__ssputs_r+0x6a>
 8005530:	6965      	ldr	r5, [r4, #20]
 8005532:	6909      	ldr	r1, [r1, #16]
 8005534:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005538:	eba3 0901 	sub.w	r9, r3, r1
 800553c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005540:	1c7b      	adds	r3, r7, #1
 8005542:	444b      	add	r3, r9
 8005544:	106d      	asrs	r5, r5, #1
 8005546:	429d      	cmp	r5, r3
 8005548:	bf38      	it	cc
 800554a:	461d      	movcc	r5, r3
 800554c:	0553      	lsls	r3, r2, #21
 800554e:	d527      	bpl.n	80055a0 <__ssputs_r+0x8c>
 8005550:	4629      	mov	r1, r5
 8005552:	f7ff ff53 	bl	80053fc <_malloc_r>
 8005556:	4606      	mov	r6, r0
 8005558:	b360      	cbz	r0, 80055b4 <__ssputs_r+0xa0>
 800555a:	6921      	ldr	r1, [r4, #16]
 800555c:	464a      	mov	r2, r9
 800555e:	f000 fd73 	bl	8006048 <memcpy>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800556c:	81a3      	strh	r3, [r4, #12]
 800556e:	6126      	str	r6, [r4, #16]
 8005570:	6165      	str	r5, [r4, #20]
 8005572:	444e      	add	r6, r9
 8005574:	eba5 0509 	sub.w	r5, r5, r9
 8005578:	6026      	str	r6, [r4, #0]
 800557a:	60a5      	str	r5, [r4, #8]
 800557c:	463e      	mov	r6, r7
 800557e:	42be      	cmp	r6, r7
 8005580:	d900      	bls.n	8005584 <__ssputs_r+0x70>
 8005582:	463e      	mov	r6, r7
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	4632      	mov	r2, r6
 8005588:	4641      	mov	r1, r8
 800558a:	f000 fd33 	bl	8005ff4 <memmove>
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	1b9b      	subs	r3, r3, r6
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	4433      	add	r3, r6
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	2000      	movs	r0, #0
 800559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a0:	462a      	mov	r2, r5
 80055a2:	f000 fd5f 	bl	8006064 <_realloc_r>
 80055a6:	4606      	mov	r6, r0
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d1e0      	bne.n	800556e <__ssputs_r+0x5a>
 80055ac:	6921      	ldr	r1, [r4, #16]
 80055ae:	4650      	mov	r0, sl
 80055b0:	f7ff feb8 	bl	8005324 <_free_r>
 80055b4:	230c      	movs	r3, #12
 80055b6:	f8ca 3000 	str.w	r3, [sl]
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	f04f 30ff 	mov.w	r0, #4294967295
 80055c6:	e7e9      	b.n	800559c <__ssputs_r+0x88>

080055c8 <_svfiprintf_r>:
 80055c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055cc:	4698      	mov	r8, r3
 80055ce:	898b      	ldrh	r3, [r1, #12]
 80055d0:	061b      	lsls	r3, r3, #24
 80055d2:	b09d      	sub	sp, #116	; 0x74
 80055d4:	4607      	mov	r7, r0
 80055d6:	460d      	mov	r5, r1
 80055d8:	4614      	mov	r4, r2
 80055da:	d50e      	bpl.n	80055fa <_svfiprintf_r+0x32>
 80055dc:	690b      	ldr	r3, [r1, #16]
 80055de:	b963      	cbnz	r3, 80055fa <_svfiprintf_r+0x32>
 80055e0:	2140      	movs	r1, #64	; 0x40
 80055e2:	f7ff ff0b 	bl	80053fc <_malloc_r>
 80055e6:	6028      	str	r0, [r5, #0]
 80055e8:	6128      	str	r0, [r5, #16]
 80055ea:	b920      	cbnz	r0, 80055f6 <_svfiprintf_r+0x2e>
 80055ec:	230c      	movs	r3, #12
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	f04f 30ff 	mov.w	r0, #4294967295
 80055f4:	e0d0      	b.n	8005798 <_svfiprintf_r+0x1d0>
 80055f6:	2340      	movs	r3, #64	; 0x40
 80055f8:	616b      	str	r3, [r5, #20]
 80055fa:	2300      	movs	r3, #0
 80055fc:	9309      	str	r3, [sp, #36]	; 0x24
 80055fe:	2320      	movs	r3, #32
 8005600:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005604:	f8cd 800c 	str.w	r8, [sp, #12]
 8005608:	2330      	movs	r3, #48	; 0x30
 800560a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057b0 <_svfiprintf_r+0x1e8>
 800560e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005612:	f04f 0901 	mov.w	r9, #1
 8005616:	4623      	mov	r3, r4
 8005618:	469a      	mov	sl, r3
 800561a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800561e:	b10a      	cbz	r2, 8005624 <_svfiprintf_r+0x5c>
 8005620:	2a25      	cmp	r2, #37	; 0x25
 8005622:	d1f9      	bne.n	8005618 <_svfiprintf_r+0x50>
 8005624:	ebba 0b04 	subs.w	fp, sl, r4
 8005628:	d00b      	beq.n	8005642 <_svfiprintf_r+0x7a>
 800562a:	465b      	mov	r3, fp
 800562c:	4622      	mov	r2, r4
 800562e:	4629      	mov	r1, r5
 8005630:	4638      	mov	r0, r7
 8005632:	f7ff ff6f 	bl	8005514 <__ssputs_r>
 8005636:	3001      	adds	r0, #1
 8005638:	f000 80a9 	beq.w	800578e <_svfiprintf_r+0x1c6>
 800563c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800563e:	445a      	add	r2, fp
 8005640:	9209      	str	r2, [sp, #36]	; 0x24
 8005642:	f89a 3000 	ldrb.w	r3, [sl]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80a1 	beq.w	800578e <_svfiprintf_r+0x1c6>
 800564c:	2300      	movs	r3, #0
 800564e:	f04f 32ff 	mov.w	r2, #4294967295
 8005652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005656:	f10a 0a01 	add.w	sl, sl, #1
 800565a:	9304      	str	r3, [sp, #16]
 800565c:	9307      	str	r3, [sp, #28]
 800565e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005662:	931a      	str	r3, [sp, #104]	; 0x68
 8005664:	4654      	mov	r4, sl
 8005666:	2205      	movs	r2, #5
 8005668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800566c:	4850      	ldr	r0, [pc, #320]	; (80057b0 <_svfiprintf_r+0x1e8>)
 800566e:	f7fa fdb7 	bl	80001e0 <memchr>
 8005672:	9a04      	ldr	r2, [sp, #16]
 8005674:	b9d8      	cbnz	r0, 80056ae <_svfiprintf_r+0xe6>
 8005676:	06d0      	lsls	r0, r2, #27
 8005678:	bf44      	itt	mi
 800567a:	2320      	movmi	r3, #32
 800567c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005680:	0711      	lsls	r1, r2, #28
 8005682:	bf44      	itt	mi
 8005684:	232b      	movmi	r3, #43	; 0x2b
 8005686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800568a:	f89a 3000 	ldrb.w	r3, [sl]
 800568e:	2b2a      	cmp	r3, #42	; 0x2a
 8005690:	d015      	beq.n	80056be <_svfiprintf_r+0xf6>
 8005692:	9a07      	ldr	r2, [sp, #28]
 8005694:	4654      	mov	r4, sl
 8005696:	2000      	movs	r0, #0
 8005698:	f04f 0c0a 	mov.w	ip, #10
 800569c:	4621      	mov	r1, r4
 800569e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056a2:	3b30      	subs	r3, #48	; 0x30
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	d94d      	bls.n	8005744 <_svfiprintf_r+0x17c>
 80056a8:	b1b0      	cbz	r0, 80056d8 <_svfiprintf_r+0x110>
 80056aa:	9207      	str	r2, [sp, #28]
 80056ac:	e014      	b.n	80056d8 <_svfiprintf_r+0x110>
 80056ae:	eba0 0308 	sub.w	r3, r0, r8
 80056b2:	fa09 f303 	lsl.w	r3, r9, r3
 80056b6:	4313      	orrs	r3, r2
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	46a2      	mov	sl, r4
 80056bc:	e7d2      	b.n	8005664 <_svfiprintf_r+0x9c>
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	1d19      	adds	r1, r3, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	9103      	str	r1, [sp, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bfbb      	ittet	lt
 80056ca:	425b      	neglt	r3, r3
 80056cc:	f042 0202 	orrlt.w	r2, r2, #2
 80056d0:	9307      	strge	r3, [sp, #28]
 80056d2:	9307      	strlt	r3, [sp, #28]
 80056d4:	bfb8      	it	lt
 80056d6:	9204      	strlt	r2, [sp, #16]
 80056d8:	7823      	ldrb	r3, [r4, #0]
 80056da:	2b2e      	cmp	r3, #46	; 0x2e
 80056dc:	d10c      	bne.n	80056f8 <_svfiprintf_r+0x130>
 80056de:	7863      	ldrb	r3, [r4, #1]
 80056e0:	2b2a      	cmp	r3, #42	; 0x2a
 80056e2:	d134      	bne.n	800574e <_svfiprintf_r+0x186>
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	1d1a      	adds	r2, r3, #4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	9203      	str	r2, [sp, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bfb8      	it	lt
 80056f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80056f4:	3402      	adds	r4, #2
 80056f6:	9305      	str	r3, [sp, #20]
 80056f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057c0 <_svfiprintf_r+0x1f8>
 80056fc:	7821      	ldrb	r1, [r4, #0]
 80056fe:	2203      	movs	r2, #3
 8005700:	4650      	mov	r0, sl
 8005702:	f7fa fd6d 	bl	80001e0 <memchr>
 8005706:	b138      	cbz	r0, 8005718 <_svfiprintf_r+0x150>
 8005708:	9b04      	ldr	r3, [sp, #16]
 800570a:	eba0 000a 	sub.w	r0, r0, sl
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	4082      	lsls	r2, r0
 8005712:	4313      	orrs	r3, r2
 8005714:	3401      	adds	r4, #1
 8005716:	9304      	str	r3, [sp, #16]
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	4825      	ldr	r0, [pc, #148]	; (80057b4 <_svfiprintf_r+0x1ec>)
 800571e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005722:	2206      	movs	r2, #6
 8005724:	f7fa fd5c 	bl	80001e0 <memchr>
 8005728:	2800      	cmp	r0, #0
 800572a:	d038      	beq.n	800579e <_svfiprintf_r+0x1d6>
 800572c:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <_svfiprintf_r+0x1f0>)
 800572e:	bb1b      	cbnz	r3, 8005778 <_svfiprintf_r+0x1b0>
 8005730:	9b03      	ldr	r3, [sp, #12]
 8005732:	3307      	adds	r3, #7
 8005734:	f023 0307 	bic.w	r3, r3, #7
 8005738:	3308      	adds	r3, #8
 800573a:	9303      	str	r3, [sp, #12]
 800573c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573e:	4433      	add	r3, r6
 8005740:	9309      	str	r3, [sp, #36]	; 0x24
 8005742:	e768      	b.n	8005616 <_svfiprintf_r+0x4e>
 8005744:	fb0c 3202 	mla	r2, ip, r2, r3
 8005748:	460c      	mov	r4, r1
 800574a:	2001      	movs	r0, #1
 800574c:	e7a6      	b.n	800569c <_svfiprintf_r+0xd4>
 800574e:	2300      	movs	r3, #0
 8005750:	3401      	adds	r4, #1
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	4619      	mov	r1, r3
 8005756:	f04f 0c0a 	mov.w	ip, #10
 800575a:	4620      	mov	r0, r4
 800575c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005760:	3a30      	subs	r2, #48	; 0x30
 8005762:	2a09      	cmp	r2, #9
 8005764:	d903      	bls.n	800576e <_svfiprintf_r+0x1a6>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0c6      	beq.n	80056f8 <_svfiprintf_r+0x130>
 800576a:	9105      	str	r1, [sp, #20]
 800576c:	e7c4      	b.n	80056f8 <_svfiprintf_r+0x130>
 800576e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005772:	4604      	mov	r4, r0
 8005774:	2301      	movs	r3, #1
 8005776:	e7f0      	b.n	800575a <_svfiprintf_r+0x192>
 8005778:	ab03      	add	r3, sp, #12
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	462a      	mov	r2, r5
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <_svfiprintf_r+0x1f4>)
 8005780:	a904      	add	r1, sp, #16
 8005782:	4638      	mov	r0, r7
 8005784:	f3af 8000 	nop.w
 8005788:	1c42      	adds	r2, r0, #1
 800578a:	4606      	mov	r6, r0
 800578c:	d1d6      	bne.n	800573c <_svfiprintf_r+0x174>
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	065b      	lsls	r3, r3, #25
 8005792:	f53f af2d 	bmi.w	80055f0 <_svfiprintf_r+0x28>
 8005796:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005798:	b01d      	add	sp, #116	; 0x74
 800579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579e:	ab03      	add	r3, sp, #12
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	462a      	mov	r2, r5
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <_svfiprintf_r+0x1f4>)
 80057a6:	a904      	add	r1, sp, #16
 80057a8:	4638      	mov	r0, r7
 80057aa:	f000 f9bd 	bl	8005b28 <_printf_i>
 80057ae:	e7eb      	b.n	8005788 <_svfiprintf_r+0x1c0>
 80057b0:	080062e8 	.word	0x080062e8
 80057b4:	080062f2 	.word	0x080062f2
 80057b8:	00000000 	.word	0x00000000
 80057bc:	08005515 	.word	0x08005515
 80057c0:	080062ee 	.word	0x080062ee

080057c4 <__sfputc_r>:
 80057c4:	6893      	ldr	r3, [r2, #8]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	b410      	push	{r4}
 80057cc:	6093      	str	r3, [r2, #8]
 80057ce:	da08      	bge.n	80057e2 <__sfputc_r+0x1e>
 80057d0:	6994      	ldr	r4, [r2, #24]
 80057d2:	42a3      	cmp	r3, r4
 80057d4:	db01      	blt.n	80057da <__sfputc_r+0x16>
 80057d6:	290a      	cmp	r1, #10
 80057d8:	d103      	bne.n	80057e2 <__sfputc_r+0x1e>
 80057da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057de:	f000 bb73 	b.w	8005ec8 <__swbuf_r>
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	1c58      	adds	r0, r3, #1
 80057e6:	6010      	str	r0, [r2, #0]
 80057e8:	7019      	strb	r1, [r3, #0]
 80057ea:	4608      	mov	r0, r1
 80057ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <__sfputs_r>:
 80057f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057f4:	4606      	mov	r6, r0
 80057f6:	460f      	mov	r7, r1
 80057f8:	4614      	mov	r4, r2
 80057fa:	18d5      	adds	r5, r2, r3
 80057fc:	42ac      	cmp	r4, r5
 80057fe:	d101      	bne.n	8005804 <__sfputs_r+0x12>
 8005800:	2000      	movs	r0, #0
 8005802:	e007      	b.n	8005814 <__sfputs_r+0x22>
 8005804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005808:	463a      	mov	r2, r7
 800580a:	4630      	mov	r0, r6
 800580c:	f7ff ffda 	bl	80057c4 <__sfputc_r>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d1f3      	bne.n	80057fc <__sfputs_r+0xa>
 8005814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005818 <_vfiprintf_r>:
 8005818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800581c:	460d      	mov	r5, r1
 800581e:	b09d      	sub	sp, #116	; 0x74
 8005820:	4614      	mov	r4, r2
 8005822:	4698      	mov	r8, r3
 8005824:	4606      	mov	r6, r0
 8005826:	b118      	cbz	r0, 8005830 <_vfiprintf_r+0x18>
 8005828:	6a03      	ldr	r3, [r0, #32]
 800582a:	b90b      	cbnz	r3, 8005830 <_vfiprintf_r+0x18>
 800582c:	f7ff fc52 	bl	80050d4 <__sinit>
 8005830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005832:	07d9      	lsls	r1, r3, #31
 8005834:	d405      	bmi.n	8005842 <_vfiprintf_r+0x2a>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	059a      	lsls	r2, r3, #22
 800583a:	d402      	bmi.n	8005842 <_vfiprintf_r+0x2a>
 800583c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800583e:	f7ff fd6e 	bl	800531e <__retarget_lock_acquire_recursive>
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	071b      	lsls	r3, r3, #28
 8005846:	d501      	bpl.n	800584c <_vfiprintf_r+0x34>
 8005848:	692b      	ldr	r3, [r5, #16]
 800584a:	b99b      	cbnz	r3, 8005874 <_vfiprintf_r+0x5c>
 800584c:	4629      	mov	r1, r5
 800584e:	4630      	mov	r0, r6
 8005850:	f000 fb78 	bl	8005f44 <__swsetup_r>
 8005854:	b170      	cbz	r0, 8005874 <_vfiprintf_r+0x5c>
 8005856:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005858:	07dc      	lsls	r4, r3, #31
 800585a:	d504      	bpl.n	8005866 <_vfiprintf_r+0x4e>
 800585c:	f04f 30ff 	mov.w	r0, #4294967295
 8005860:	b01d      	add	sp, #116	; 0x74
 8005862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	0598      	lsls	r0, r3, #22
 800586a:	d4f7      	bmi.n	800585c <_vfiprintf_r+0x44>
 800586c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800586e:	f7ff fd57 	bl	8005320 <__retarget_lock_release_recursive>
 8005872:	e7f3      	b.n	800585c <_vfiprintf_r+0x44>
 8005874:	2300      	movs	r3, #0
 8005876:	9309      	str	r3, [sp, #36]	; 0x24
 8005878:	2320      	movs	r3, #32
 800587a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800587e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005882:	2330      	movs	r3, #48	; 0x30
 8005884:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005a38 <_vfiprintf_r+0x220>
 8005888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800588c:	f04f 0901 	mov.w	r9, #1
 8005890:	4623      	mov	r3, r4
 8005892:	469a      	mov	sl, r3
 8005894:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005898:	b10a      	cbz	r2, 800589e <_vfiprintf_r+0x86>
 800589a:	2a25      	cmp	r2, #37	; 0x25
 800589c:	d1f9      	bne.n	8005892 <_vfiprintf_r+0x7a>
 800589e:	ebba 0b04 	subs.w	fp, sl, r4
 80058a2:	d00b      	beq.n	80058bc <_vfiprintf_r+0xa4>
 80058a4:	465b      	mov	r3, fp
 80058a6:	4622      	mov	r2, r4
 80058a8:	4629      	mov	r1, r5
 80058aa:	4630      	mov	r0, r6
 80058ac:	f7ff ffa1 	bl	80057f2 <__sfputs_r>
 80058b0:	3001      	adds	r0, #1
 80058b2:	f000 80a9 	beq.w	8005a08 <_vfiprintf_r+0x1f0>
 80058b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058b8:	445a      	add	r2, fp
 80058ba:	9209      	str	r2, [sp, #36]	; 0x24
 80058bc:	f89a 3000 	ldrb.w	r3, [sl]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 80a1 	beq.w	8005a08 <_vfiprintf_r+0x1f0>
 80058c6:	2300      	movs	r3, #0
 80058c8:	f04f 32ff 	mov.w	r2, #4294967295
 80058cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058d0:	f10a 0a01 	add.w	sl, sl, #1
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058dc:	931a      	str	r3, [sp, #104]	; 0x68
 80058de:	4654      	mov	r4, sl
 80058e0:	2205      	movs	r2, #5
 80058e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e6:	4854      	ldr	r0, [pc, #336]	; (8005a38 <_vfiprintf_r+0x220>)
 80058e8:	f7fa fc7a 	bl	80001e0 <memchr>
 80058ec:	9a04      	ldr	r2, [sp, #16]
 80058ee:	b9d8      	cbnz	r0, 8005928 <_vfiprintf_r+0x110>
 80058f0:	06d1      	lsls	r1, r2, #27
 80058f2:	bf44      	itt	mi
 80058f4:	2320      	movmi	r3, #32
 80058f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058fa:	0713      	lsls	r3, r2, #28
 80058fc:	bf44      	itt	mi
 80058fe:	232b      	movmi	r3, #43	; 0x2b
 8005900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005904:	f89a 3000 	ldrb.w	r3, [sl]
 8005908:	2b2a      	cmp	r3, #42	; 0x2a
 800590a:	d015      	beq.n	8005938 <_vfiprintf_r+0x120>
 800590c:	9a07      	ldr	r2, [sp, #28]
 800590e:	4654      	mov	r4, sl
 8005910:	2000      	movs	r0, #0
 8005912:	f04f 0c0a 	mov.w	ip, #10
 8005916:	4621      	mov	r1, r4
 8005918:	f811 3b01 	ldrb.w	r3, [r1], #1
 800591c:	3b30      	subs	r3, #48	; 0x30
 800591e:	2b09      	cmp	r3, #9
 8005920:	d94d      	bls.n	80059be <_vfiprintf_r+0x1a6>
 8005922:	b1b0      	cbz	r0, 8005952 <_vfiprintf_r+0x13a>
 8005924:	9207      	str	r2, [sp, #28]
 8005926:	e014      	b.n	8005952 <_vfiprintf_r+0x13a>
 8005928:	eba0 0308 	sub.w	r3, r0, r8
 800592c:	fa09 f303 	lsl.w	r3, r9, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	9304      	str	r3, [sp, #16]
 8005934:	46a2      	mov	sl, r4
 8005936:	e7d2      	b.n	80058de <_vfiprintf_r+0xc6>
 8005938:	9b03      	ldr	r3, [sp, #12]
 800593a:	1d19      	adds	r1, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	9103      	str	r1, [sp, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfbb      	ittet	lt
 8005944:	425b      	neglt	r3, r3
 8005946:	f042 0202 	orrlt.w	r2, r2, #2
 800594a:	9307      	strge	r3, [sp, #28]
 800594c:	9307      	strlt	r3, [sp, #28]
 800594e:	bfb8      	it	lt
 8005950:	9204      	strlt	r2, [sp, #16]
 8005952:	7823      	ldrb	r3, [r4, #0]
 8005954:	2b2e      	cmp	r3, #46	; 0x2e
 8005956:	d10c      	bne.n	8005972 <_vfiprintf_r+0x15a>
 8005958:	7863      	ldrb	r3, [r4, #1]
 800595a:	2b2a      	cmp	r3, #42	; 0x2a
 800595c:	d134      	bne.n	80059c8 <_vfiprintf_r+0x1b0>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	1d1a      	adds	r2, r3, #4
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	9203      	str	r2, [sp, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	bfb8      	it	lt
 800596a:	f04f 33ff 	movlt.w	r3, #4294967295
 800596e:	3402      	adds	r4, #2
 8005970:	9305      	str	r3, [sp, #20]
 8005972:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005a48 <_vfiprintf_r+0x230>
 8005976:	7821      	ldrb	r1, [r4, #0]
 8005978:	2203      	movs	r2, #3
 800597a:	4650      	mov	r0, sl
 800597c:	f7fa fc30 	bl	80001e0 <memchr>
 8005980:	b138      	cbz	r0, 8005992 <_vfiprintf_r+0x17a>
 8005982:	9b04      	ldr	r3, [sp, #16]
 8005984:	eba0 000a 	sub.w	r0, r0, sl
 8005988:	2240      	movs	r2, #64	; 0x40
 800598a:	4082      	lsls	r2, r0
 800598c:	4313      	orrs	r3, r2
 800598e:	3401      	adds	r4, #1
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005996:	4829      	ldr	r0, [pc, #164]	; (8005a3c <_vfiprintf_r+0x224>)
 8005998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800599c:	2206      	movs	r2, #6
 800599e:	f7fa fc1f 	bl	80001e0 <memchr>
 80059a2:	2800      	cmp	r0, #0
 80059a4:	d03f      	beq.n	8005a26 <_vfiprintf_r+0x20e>
 80059a6:	4b26      	ldr	r3, [pc, #152]	; (8005a40 <_vfiprintf_r+0x228>)
 80059a8:	bb1b      	cbnz	r3, 80059f2 <_vfiprintf_r+0x1da>
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	3307      	adds	r3, #7
 80059ae:	f023 0307 	bic.w	r3, r3, #7
 80059b2:	3308      	adds	r3, #8
 80059b4:	9303      	str	r3, [sp, #12]
 80059b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b8:	443b      	add	r3, r7
 80059ba:	9309      	str	r3, [sp, #36]	; 0x24
 80059bc:	e768      	b.n	8005890 <_vfiprintf_r+0x78>
 80059be:	fb0c 3202 	mla	r2, ip, r2, r3
 80059c2:	460c      	mov	r4, r1
 80059c4:	2001      	movs	r0, #1
 80059c6:	e7a6      	b.n	8005916 <_vfiprintf_r+0xfe>
 80059c8:	2300      	movs	r3, #0
 80059ca:	3401      	adds	r4, #1
 80059cc:	9305      	str	r3, [sp, #20]
 80059ce:	4619      	mov	r1, r3
 80059d0:	f04f 0c0a 	mov.w	ip, #10
 80059d4:	4620      	mov	r0, r4
 80059d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059da:	3a30      	subs	r2, #48	; 0x30
 80059dc:	2a09      	cmp	r2, #9
 80059de:	d903      	bls.n	80059e8 <_vfiprintf_r+0x1d0>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0c6      	beq.n	8005972 <_vfiprintf_r+0x15a>
 80059e4:	9105      	str	r1, [sp, #20]
 80059e6:	e7c4      	b.n	8005972 <_vfiprintf_r+0x15a>
 80059e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ec:	4604      	mov	r4, r0
 80059ee:	2301      	movs	r3, #1
 80059f0:	e7f0      	b.n	80059d4 <_vfiprintf_r+0x1bc>
 80059f2:	ab03      	add	r3, sp, #12
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	462a      	mov	r2, r5
 80059f8:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <_vfiprintf_r+0x22c>)
 80059fa:	a904      	add	r1, sp, #16
 80059fc:	4630      	mov	r0, r6
 80059fe:	f3af 8000 	nop.w
 8005a02:	4607      	mov	r7, r0
 8005a04:	1c78      	adds	r0, r7, #1
 8005a06:	d1d6      	bne.n	80059b6 <_vfiprintf_r+0x19e>
 8005a08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a0a:	07d9      	lsls	r1, r3, #31
 8005a0c:	d405      	bmi.n	8005a1a <_vfiprintf_r+0x202>
 8005a0e:	89ab      	ldrh	r3, [r5, #12]
 8005a10:	059a      	lsls	r2, r3, #22
 8005a12:	d402      	bmi.n	8005a1a <_vfiprintf_r+0x202>
 8005a14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a16:	f7ff fc83 	bl	8005320 <__retarget_lock_release_recursive>
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	065b      	lsls	r3, r3, #25
 8005a1e:	f53f af1d 	bmi.w	800585c <_vfiprintf_r+0x44>
 8005a22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a24:	e71c      	b.n	8005860 <_vfiprintf_r+0x48>
 8005a26:	ab03      	add	r3, sp, #12
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	462a      	mov	r2, r5
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <_vfiprintf_r+0x22c>)
 8005a2e:	a904      	add	r1, sp, #16
 8005a30:	4630      	mov	r0, r6
 8005a32:	f000 f879 	bl	8005b28 <_printf_i>
 8005a36:	e7e4      	b.n	8005a02 <_vfiprintf_r+0x1ea>
 8005a38:	080062e8 	.word	0x080062e8
 8005a3c:	080062f2 	.word	0x080062f2
 8005a40:	00000000 	.word	0x00000000
 8005a44:	080057f3 	.word	0x080057f3
 8005a48:	080062ee 	.word	0x080062ee

08005a4c <_printf_common>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	4616      	mov	r6, r2
 8005a52:	4699      	mov	r9, r3
 8005a54:	688a      	ldr	r2, [r1, #8]
 8005a56:	690b      	ldr	r3, [r1, #16]
 8005a58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	bfb8      	it	lt
 8005a60:	4613      	movlt	r3, r2
 8005a62:	6033      	str	r3, [r6, #0]
 8005a64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a68:	4607      	mov	r7, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	b10a      	cbz	r2, 8005a72 <_printf_common+0x26>
 8005a6e:	3301      	adds	r3, #1
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	0699      	lsls	r1, r3, #26
 8005a76:	bf42      	ittt	mi
 8005a78:	6833      	ldrmi	r3, [r6, #0]
 8005a7a:	3302      	addmi	r3, #2
 8005a7c:	6033      	strmi	r3, [r6, #0]
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	f015 0506 	ands.w	r5, r5, #6
 8005a84:	d106      	bne.n	8005a94 <_printf_common+0x48>
 8005a86:	f104 0a19 	add.w	sl, r4, #25
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	6832      	ldr	r2, [r6, #0]
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dc26      	bgt.n	8005ae2 <_printf_common+0x96>
 8005a94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a98:	1e13      	subs	r3, r2, #0
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	bf18      	it	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	0692      	lsls	r2, r2, #26
 8005aa2:	d42b      	bmi.n	8005afc <_printf_common+0xb0>
 8005aa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	4638      	mov	r0, r7
 8005aac:	47c0      	blx	r8
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d01e      	beq.n	8005af0 <_printf_common+0xa4>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	bf02      	ittt	eq
 8005abe:	68e5      	ldreq	r5, [r4, #12]
 8005ac0:	6833      	ldreq	r3, [r6, #0]
 8005ac2:	1aed      	subeq	r5, r5, r3
 8005ac4:	68a3      	ldr	r3, [r4, #8]
 8005ac6:	bf0c      	ite	eq
 8005ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005acc:	2500      	movne	r5, #0
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	bfc4      	itt	gt
 8005ad2:	1a9b      	subgt	r3, r3, r2
 8005ad4:	18ed      	addgt	r5, r5, r3
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	341a      	adds	r4, #26
 8005ada:	42b5      	cmp	r5, r6
 8005adc:	d11a      	bne.n	8005b14 <_printf_common+0xc8>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e008      	b.n	8005af4 <_printf_common+0xa8>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4638      	mov	r0, r7
 8005aea:	47c0      	blx	r8
 8005aec:	3001      	adds	r0, #1
 8005aee:	d103      	bne.n	8005af8 <_printf_common+0xac>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	3501      	adds	r5, #1
 8005afa:	e7c6      	b.n	8005a8a <_printf_common+0x3e>
 8005afc:	18e1      	adds	r1, r4, r3
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	2030      	movs	r0, #48	; 0x30
 8005b02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b06:	4422      	add	r2, r4
 8005b08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b10:	3302      	adds	r3, #2
 8005b12:	e7c7      	b.n	8005aa4 <_printf_common+0x58>
 8005b14:	2301      	movs	r3, #1
 8005b16:	4622      	mov	r2, r4
 8005b18:	4649      	mov	r1, r9
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c0      	blx	r8
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d0e6      	beq.n	8005af0 <_printf_common+0xa4>
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7d9      	b.n	8005ada <_printf_common+0x8e>
	...

08005b28 <_printf_i>:
 8005b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	7e0f      	ldrb	r7, [r1, #24]
 8005b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b30:	2f78      	cmp	r7, #120	; 0x78
 8005b32:	4691      	mov	r9, r2
 8005b34:	4680      	mov	r8, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	469a      	mov	sl, r3
 8005b3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b3e:	d807      	bhi.n	8005b50 <_printf_i+0x28>
 8005b40:	2f62      	cmp	r7, #98	; 0x62
 8005b42:	d80a      	bhi.n	8005b5a <_printf_i+0x32>
 8005b44:	2f00      	cmp	r7, #0
 8005b46:	f000 80d4 	beq.w	8005cf2 <_printf_i+0x1ca>
 8005b4a:	2f58      	cmp	r7, #88	; 0x58
 8005b4c:	f000 80c0 	beq.w	8005cd0 <_printf_i+0x1a8>
 8005b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b58:	e03a      	b.n	8005bd0 <_printf_i+0xa8>
 8005b5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b5e:	2b15      	cmp	r3, #21
 8005b60:	d8f6      	bhi.n	8005b50 <_printf_i+0x28>
 8005b62:	a101      	add	r1, pc, #4	; (adr r1, 8005b68 <_printf_i+0x40>)
 8005b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b68:	08005bc1 	.word	0x08005bc1
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005b51 	.word	0x08005b51
 8005b74:	08005b51 	.word	0x08005b51
 8005b78:	08005b51 	.word	0x08005b51
 8005b7c:	08005b51 	.word	0x08005b51
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005b51 	.word	0x08005b51
 8005b88:	08005b51 	.word	0x08005b51
 8005b8c:	08005b51 	.word	0x08005b51
 8005b90:	08005b51 	.word	0x08005b51
 8005b94:	08005cd9 	.word	0x08005cd9
 8005b98:	08005c01 	.word	0x08005c01
 8005b9c:	08005c93 	.word	0x08005c93
 8005ba0:	08005b51 	.word	0x08005b51
 8005ba4:	08005b51 	.word	0x08005b51
 8005ba8:	08005cfb 	.word	0x08005cfb
 8005bac:	08005b51 	.word	0x08005b51
 8005bb0:	08005c01 	.word	0x08005c01
 8005bb4:	08005b51 	.word	0x08005b51
 8005bb8:	08005b51 	.word	0x08005b51
 8005bbc:	08005c9b 	.word	0x08005c9b
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	602a      	str	r2, [r5, #0]
 8005bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e09f      	b.n	8005d14 <_printf_i+0x1ec>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	682b      	ldr	r3, [r5, #0]
 8005bd8:	0607      	lsls	r7, r0, #24
 8005bda:	f103 0104 	add.w	r1, r3, #4
 8005bde:	6029      	str	r1, [r5, #0]
 8005be0:	d501      	bpl.n	8005be6 <_printf_i+0xbe>
 8005be2:	681e      	ldr	r6, [r3, #0]
 8005be4:	e003      	b.n	8005bee <_printf_i+0xc6>
 8005be6:	0646      	lsls	r6, r0, #25
 8005be8:	d5fb      	bpl.n	8005be2 <_printf_i+0xba>
 8005bea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	da03      	bge.n	8005bfa <_printf_i+0xd2>
 8005bf2:	232d      	movs	r3, #45	; 0x2d
 8005bf4:	4276      	negs	r6, r6
 8005bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfa:	485a      	ldr	r0, [pc, #360]	; (8005d64 <_printf_i+0x23c>)
 8005bfc:	230a      	movs	r3, #10
 8005bfe:	e012      	b.n	8005c26 <_printf_i+0xfe>
 8005c00:	682b      	ldr	r3, [r5, #0]
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	1d19      	adds	r1, r3, #4
 8005c06:	6029      	str	r1, [r5, #0]
 8005c08:	0605      	lsls	r5, r0, #24
 8005c0a:	d501      	bpl.n	8005c10 <_printf_i+0xe8>
 8005c0c:	681e      	ldr	r6, [r3, #0]
 8005c0e:	e002      	b.n	8005c16 <_printf_i+0xee>
 8005c10:	0641      	lsls	r1, r0, #25
 8005c12:	d5fb      	bpl.n	8005c0c <_printf_i+0xe4>
 8005c14:	881e      	ldrh	r6, [r3, #0]
 8005c16:	4853      	ldr	r0, [pc, #332]	; (8005d64 <_printf_i+0x23c>)
 8005c18:	2f6f      	cmp	r7, #111	; 0x6f
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2308      	moveq	r3, #8
 8005c1e:	230a      	movne	r3, #10
 8005c20:	2100      	movs	r1, #0
 8005c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c26:	6865      	ldr	r5, [r4, #4]
 8005c28:	60a5      	str	r5, [r4, #8]
 8005c2a:	2d00      	cmp	r5, #0
 8005c2c:	bfa2      	ittt	ge
 8005c2e:	6821      	ldrge	r1, [r4, #0]
 8005c30:	f021 0104 	bicge.w	r1, r1, #4
 8005c34:	6021      	strge	r1, [r4, #0]
 8005c36:	b90e      	cbnz	r6, 8005c3c <_printf_i+0x114>
 8005c38:	2d00      	cmp	r5, #0
 8005c3a:	d04b      	beq.n	8005cd4 <_printf_i+0x1ac>
 8005c3c:	4615      	mov	r5, r2
 8005c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c42:	fb03 6711 	mls	r7, r3, r1, r6
 8005c46:	5dc7      	ldrb	r7, [r0, r7]
 8005c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c4c:	4637      	mov	r7, r6
 8005c4e:	42bb      	cmp	r3, r7
 8005c50:	460e      	mov	r6, r1
 8005c52:	d9f4      	bls.n	8005c3e <_printf_i+0x116>
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d10b      	bne.n	8005c70 <_printf_i+0x148>
 8005c58:	6823      	ldr	r3, [r4, #0]
 8005c5a:	07de      	lsls	r6, r3, #31
 8005c5c:	d508      	bpl.n	8005c70 <_printf_i+0x148>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	6861      	ldr	r1, [r4, #4]
 8005c62:	4299      	cmp	r1, r3
 8005c64:	bfde      	ittt	le
 8005c66:	2330      	movle	r3, #48	; 0x30
 8005c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c70:	1b52      	subs	r2, r2, r5
 8005c72:	6122      	str	r2, [r4, #16]
 8005c74:	f8cd a000 	str.w	sl, [sp]
 8005c78:	464b      	mov	r3, r9
 8005c7a:	aa03      	add	r2, sp, #12
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7ff fee4 	bl	8005a4c <_printf_common>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d14a      	bne.n	8005d1e <_printf_i+0x1f6>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	b004      	add	sp, #16
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	f043 0320 	orr.w	r3, r3, #32
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	4833      	ldr	r0, [pc, #204]	; (8005d68 <_printf_i+0x240>)
 8005c9c:	2778      	movs	r7, #120	; 0x78
 8005c9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	6829      	ldr	r1, [r5, #0]
 8005ca6:	061f      	lsls	r7, r3, #24
 8005ca8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005cac:	d402      	bmi.n	8005cb4 <_printf_i+0x18c>
 8005cae:	065f      	lsls	r7, r3, #25
 8005cb0:	bf48      	it	mi
 8005cb2:	b2b6      	uxthmi	r6, r6
 8005cb4:	07df      	lsls	r7, r3, #31
 8005cb6:	bf48      	it	mi
 8005cb8:	f043 0320 	orrmi.w	r3, r3, #32
 8005cbc:	6029      	str	r1, [r5, #0]
 8005cbe:	bf48      	it	mi
 8005cc0:	6023      	strmi	r3, [r4, #0]
 8005cc2:	b91e      	cbnz	r6, 8005ccc <_printf_i+0x1a4>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	f023 0320 	bic.w	r3, r3, #32
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	2310      	movs	r3, #16
 8005cce:	e7a7      	b.n	8005c20 <_printf_i+0xf8>
 8005cd0:	4824      	ldr	r0, [pc, #144]	; (8005d64 <_printf_i+0x23c>)
 8005cd2:	e7e4      	b.n	8005c9e <_printf_i+0x176>
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	e7bd      	b.n	8005c54 <_printf_i+0x12c>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	6826      	ldr	r6, [r4, #0]
 8005cdc:	6961      	ldr	r1, [r4, #20]
 8005cde:	1d18      	adds	r0, r3, #4
 8005ce0:	6028      	str	r0, [r5, #0]
 8005ce2:	0635      	lsls	r5, r6, #24
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	d501      	bpl.n	8005cec <_printf_i+0x1c4>
 8005ce8:	6019      	str	r1, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <_printf_i+0x1ca>
 8005cec:	0670      	lsls	r0, r6, #25
 8005cee:	d5fb      	bpl.n	8005ce8 <_printf_i+0x1c0>
 8005cf0:	8019      	strh	r1, [r3, #0]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	4615      	mov	r5, r2
 8005cf8:	e7bc      	b.n	8005c74 <_printf_i+0x14c>
 8005cfa:	682b      	ldr	r3, [r5, #0]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	602a      	str	r2, [r5, #0]
 8005d00:	681d      	ldr	r5, [r3, #0]
 8005d02:	6862      	ldr	r2, [r4, #4]
 8005d04:	2100      	movs	r1, #0
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7fa fa6a 	bl	80001e0 <memchr>
 8005d0c:	b108      	cbz	r0, 8005d12 <_printf_i+0x1ea>
 8005d0e:	1b40      	subs	r0, r0, r5
 8005d10:	6060      	str	r0, [r4, #4]
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	2300      	movs	r3, #0
 8005d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d1c:	e7aa      	b.n	8005c74 <_printf_i+0x14c>
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4649      	mov	r1, r9
 8005d24:	4640      	mov	r0, r8
 8005d26:	47d0      	blx	sl
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d0ad      	beq.n	8005c88 <_printf_i+0x160>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	079b      	lsls	r3, r3, #30
 8005d30:	d413      	bmi.n	8005d5a <_printf_i+0x232>
 8005d32:	68e0      	ldr	r0, [r4, #12]
 8005d34:	9b03      	ldr	r3, [sp, #12]
 8005d36:	4298      	cmp	r0, r3
 8005d38:	bfb8      	it	lt
 8005d3a:	4618      	movlt	r0, r3
 8005d3c:	e7a6      	b.n	8005c8c <_printf_i+0x164>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4632      	mov	r2, r6
 8005d42:	4649      	mov	r1, r9
 8005d44:	4640      	mov	r0, r8
 8005d46:	47d0      	blx	sl
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d09d      	beq.n	8005c88 <_printf_i+0x160>
 8005d4c:	3501      	adds	r5, #1
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	9903      	ldr	r1, [sp, #12]
 8005d52:	1a5b      	subs	r3, r3, r1
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dcf2      	bgt.n	8005d3e <_printf_i+0x216>
 8005d58:	e7eb      	b.n	8005d32 <_printf_i+0x20a>
 8005d5a:	2500      	movs	r5, #0
 8005d5c:	f104 0619 	add.w	r6, r4, #25
 8005d60:	e7f5      	b.n	8005d4e <_printf_i+0x226>
 8005d62:	bf00      	nop
 8005d64:	080062f9 	.word	0x080062f9
 8005d68:	0800630a 	.word	0x0800630a

08005d6c <__sflush_r>:
 8005d6c:	898a      	ldrh	r2, [r1, #12]
 8005d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d72:	4605      	mov	r5, r0
 8005d74:	0710      	lsls	r0, r2, #28
 8005d76:	460c      	mov	r4, r1
 8005d78:	d458      	bmi.n	8005e2c <__sflush_r+0xc0>
 8005d7a:	684b      	ldr	r3, [r1, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dc05      	bgt.n	8005d8c <__sflush_r+0x20>
 8005d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	dc02      	bgt.n	8005d8c <__sflush_r+0x20>
 8005d86:	2000      	movs	r0, #0
 8005d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d8e:	2e00      	cmp	r6, #0
 8005d90:	d0f9      	beq.n	8005d86 <__sflush_r+0x1a>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d98:	682f      	ldr	r7, [r5, #0]
 8005d9a:	6a21      	ldr	r1, [r4, #32]
 8005d9c:	602b      	str	r3, [r5, #0]
 8005d9e:	d032      	beq.n	8005e06 <__sflush_r+0x9a>
 8005da0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005da2:	89a3      	ldrh	r3, [r4, #12]
 8005da4:	075a      	lsls	r2, r3, #29
 8005da6:	d505      	bpl.n	8005db4 <__sflush_r+0x48>
 8005da8:	6863      	ldr	r3, [r4, #4]
 8005daa:	1ac0      	subs	r0, r0, r3
 8005dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dae:	b10b      	cbz	r3, 8005db4 <__sflush_r+0x48>
 8005db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005db2:	1ac0      	subs	r0, r0, r3
 8005db4:	2300      	movs	r3, #0
 8005db6:	4602      	mov	r2, r0
 8005db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dba:	6a21      	ldr	r1, [r4, #32]
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b0      	blx	r6
 8005dc0:	1c43      	adds	r3, r0, #1
 8005dc2:	89a3      	ldrh	r3, [r4, #12]
 8005dc4:	d106      	bne.n	8005dd4 <__sflush_r+0x68>
 8005dc6:	6829      	ldr	r1, [r5, #0]
 8005dc8:	291d      	cmp	r1, #29
 8005dca:	d82b      	bhi.n	8005e24 <__sflush_r+0xb8>
 8005dcc:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <__sflush_r+0x108>)
 8005dce:	410a      	asrs	r2, r1
 8005dd0:	07d6      	lsls	r6, r2, #31
 8005dd2:	d427      	bmi.n	8005e24 <__sflush_r+0xb8>
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	6062      	str	r2, [r4, #4]
 8005dd8:	04d9      	lsls	r1, r3, #19
 8005dda:	6922      	ldr	r2, [r4, #16]
 8005ddc:	6022      	str	r2, [r4, #0]
 8005dde:	d504      	bpl.n	8005dea <__sflush_r+0x7e>
 8005de0:	1c42      	adds	r2, r0, #1
 8005de2:	d101      	bne.n	8005de8 <__sflush_r+0x7c>
 8005de4:	682b      	ldr	r3, [r5, #0]
 8005de6:	b903      	cbnz	r3, 8005dea <__sflush_r+0x7e>
 8005de8:	6560      	str	r0, [r4, #84]	; 0x54
 8005dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dec:	602f      	str	r7, [r5, #0]
 8005dee:	2900      	cmp	r1, #0
 8005df0:	d0c9      	beq.n	8005d86 <__sflush_r+0x1a>
 8005df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005df6:	4299      	cmp	r1, r3
 8005df8:	d002      	beq.n	8005e00 <__sflush_r+0x94>
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7ff fa92 	bl	8005324 <_free_r>
 8005e00:	2000      	movs	r0, #0
 8005e02:	6360      	str	r0, [r4, #52]	; 0x34
 8005e04:	e7c0      	b.n	8005d88 <__sflush_r+0x1c>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4628      	mov	r0, r5
 8005e0a:	47b0      	blx	r6
 8005e0c:	1c41      	adds	r1, r0, #1
 8005e0e:	d1c8      	bne.n	8005da2 <__sflush_r+0x36>
 8005e10:	682b      	ldr	r3, [r5, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0c5      	beq.n	8005da2 <__sflush_r+0x36>
 8005e16:	2b1d      	cmp	r3, #29
 8005e18:	d001      	beq.n	8005e1e <__sflush_r+0xb2>
 8005e1a:	2b16      	cmp	r3, #22
 8005e1c:	d101      	bne.n	8005e22 <__sflush_r+0xb6>
 8005e1e:	602f      	str	r7, [r5, #0]
 8005e20:	e7b1      	b.n	8005d86 <__sflush_r+0x1a>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	e7ad      	b.n	8005d88 <__sflush_r+0x1c>
 8005e2c:	690f      	ldr	r7, [r1, #16]
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	d0a9      	beq.n	8005d86 <__sflush_r+0x1a>
 8005e32:	0793      	lsls	r3, r2, #30
 8005e34:	680e      	ldr	r6, [r1, #0]
 8005e36:	bf08      	it	eq
 8005e38:	694b      	ldreq	r3, [r1, #20]
 8005e3a:	600f      	str	r7, [r1, #0]
 8005e3c:	bf18      	it	ne
 8005e3e:	2300      	movne	r3, #0
 8005e40:	eba6 0807 	sub.w	r8, r6, r7
 8005e44:	608b      	str	r3, [r1, #8]
 8005e46:	f1b8 0f00 	cmp.w	r8, #0
 8005e4a:	dd9c      	ble.n	8005d86 <__sflush_r+0x1a>
 8005e4c:	6a21      	ldr	r1, [r4, #32]
 8005e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e50:	4643      	mov	r3, r8
 8005e52:	463a      	mov	r2, r7
 8005e54:	4628      	mov	r0, r5
 8005e56:	47b0      	blx	r6
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dc06      	bgt.n	8005e6a <__sflush_r+0xfe>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	e78e      	b.n	8005d88 <__sflush_r+0x1c>
 8005e6a:	4407      	add	r7, r0
 8005e6c:	eba8 0800 	sub.w	r8, r8, r0
 8005e70:	e7e9      	b.n	8005e46 <__sflush_r+0xda>
 8005e72:	bf00      	nop
 8005e74:	dfbffffe 	.word	0xdfbffffe

08005e78 <_fflush_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	690b      	ldr	r3, [r1, #16]
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	460c      	mov	r4, r1
 8005e80:	b913      	cbnz	r3, 8005e88 <_fflush_r+0x10>
 8005e82:	2500      	movs	r5, #0
 8005e84:	4628      	mov	r0, r5
 8005e86:	bd38      	pop	{r3, r4, r5, pc}
 8005e88:	b118      	cbz	r0, 8005e92 <_fflush_r+0x1a>
 8005e8a:	6a03      	ldr	r3, [r0, #32]
 8005e8c:	b90b      	cbnz	r3, 8005e92 <_fflush_r+0x1a>
 8005e8e:	f7ff f921 	bl	80050d4 <__sinit>
 8005e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f3      	beq.n	8005e82 <_fflush_r+0xa>
 8005e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e9c:	07d0      	lsls	r0, r2, #31
 8005e9e:	d404      	bmi.n	8005eaa <_fflush_r+0x32>
 8005ea0:	0599      	lsls	r1, r3, #22
 8005ea2:	d402      	bmi.n	8005eaa <_fflush_r+0x32>
 8005ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea6:	f7ff fa3a 	bl	800531e <__retarget_lock_acquire_recursive>
 8005eaa:	4628      	mov	r0, r5
 8005eac:	4621      	mov	r1, r4
 8005eae:	f7ff ff5d 	bl	8005d6c <__sflush_r>
 8005eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eb4:	07da      	lsls	r2, r3, #31
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	d4e4      	bmi.n	8005e84 <_fflush_r+0xc>
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	059b      	lsls	r3, r3, #22
 8005ebe:	d4e1      	bmi.n	8005e84 <_fflush_r+0xc>
 8005ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ec2:	f7ff fa2d 	bl	8005320 <__retarget_lock_release_recursive>
 8005ec6:	e7dd      	b.n	8005e84 <_fflush_r+0xc>

08005ec8 <__swbuf_r>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	460e      	mov	r6, r1
 8005ecc:	4614      	mov	r4, r2
 8005ece:	4605      	mov	r5, r0
 8005ed0:	b118      	cbz	r0, 8005eda <__swbuf_r+0x12>
 8005ed2:	6a03      	ldr	r3, [r0, #32]
 8005ed4:	b90b      	cbnz	r3, 8005eda <__swbuf_r+0x12>
 8005ed6:	f7ff f8fd 	bl	80050d4 <__sinit>
 8005eda:	69a3      	ldr	r3, [r4, #24]
 8005edc:	60a3      	str	r3, [r4, #8]
 8005ede:	89a3      	ldrh	r3, [r4, #12]
 8005ee0:	071a      	lsls	r2, r3, #28
 8005ee2:	d525      	bpl.n	8005f30 <__swbuf_r+0x68>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	b31b      	cbz	r3, 8005f30 <__swbuf_r+0x68>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	6922      	ldr	r2, [r4, #16]
 8005eec:	1a98      	subs	r0, r3, r2
 8005eee:	6963      	ldr	r3, [r4, #20]
 8005ef0:	b2f6      	uxtb	r6, r6
 8005ef2:	4283      	cmp	r3, r0
 8005ef4:	4637      	mov	r7, r6
 8005ef6:	dc04      	bgt.n	8005f02 <__swbuf_r+0x3a>
 8005ef8:	4621      	mov	r1, r4
 8005efa:	4628      	mov	r0, r5
 8005efc:	f7ff ffbc 	bl	8005e78 <_fflush_r>
 8005f00:	b9e0      	cbnz	r0, 8005f3c <__swbuf_r+0x74>
 8005f02:	68a3      	ldr	r3, [r4, #8]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	60a3      	str	r3, [r4, #8]
 8005f08:	6823      	ldr	r3, [r4, #0]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	6022      	str	r2, [r4, #0]
 8005f0e:	701e      	strb	r6, [r3, #0]
 8005f10:	6962      	ldr	r2, [r4, #20]
 8005f12:	1c43      	adds	r3, r0, #1
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d004      	beq.n	8005f22 <__swbuf_r+0x5a>
 8005f18:	89a3      	ldrh	r3, [r4, #12]
 8005f1a:	07db      	lsls	r3, r3, #31
 8005f1c:	d506      	bpl.n	8005f2c <__swbuf_r+0x64>
 8005f1e:	2e0a      	cmp	r6, #10
 8005f20:	d104      	bne.n	8005f2c <__swbuf_r+0x64>
 8005f22:	4621      	mov	r1, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	f7ff ffa7 	bl	8005e78 <_fflush_r>
 8005f2a:	b938      	cbnz	r0, 8005f3c <__swbuf_r+0x74>
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f30:	4621      	mov	r1, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f806 	bl	8005f44 <__swsetup_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d0d5      	beq.n	8005ee8 <__swbuf_r+0x20>
 8005f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f40:	e7f4      	b.n	8005f2c <__swbuf_r+0x64>
	...

08005f44 <__swsetup_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4b2a      	ldr	r3, [pc, #168]	; (8005ff0 <__swsetup_r+0xac>)
 8005f48:	4605      	mov	r5, r0
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	460c      	mov	r4, r1
 8005f4e:	b118      	cbz	r0, 8005f58 <__swsetup_r+0x14>
 8005f50:	6a03      	ldr	r3, [r0, #32]
 8005f52:	b90b      	cbnz	r3, 8005f58 <__swsetup_r+0x14>
 8005f54:	f7ff f8be 	bl	80050d4 <__sinit>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f5e:	0718      	lsls	r0, r3, #28
 8005f60:	d422      	bmi.n	8005fa8 <__swsetup_r+0x64>
 8005f62:	06d9      	lsls	r1, r3, #27
 8005f64:	d407      	bmi.n	8005f76 <__swsetup_r+0x32>
 8005f66:	2309      	movs	r3, #9
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f6e:	81a3      	strh	r3, [r4, #12]
 8005f70:	f04f 30ff 	mov.w	r0, #4294967295
 8005f74:	e034      	b.n	8005fe0 <__swsetup_r+0x9c>
 8005f76:	0758      	lsls	r0, r3, #29
 8005f78:	d512      	bpl.n	8005fa0 <__swsetup_r+0x5c>
 8005f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f7c:	b141      	cbz	r1, 8005f90 <__swsetup_r+0x4c>
 8005f7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f82:	4299      	cmp	r1, r3
 8005f84:	d002      	beq.n	8005f8c <__swsetup_r+0x48>
 8005f86:	4628      	mov	r0, r5
 8005f88:	f7ff f9cc 	bl	8005324 <_free_r>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	6363      	str	r3, [r4, #52]	; 0x34
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6063      	str	r3, [r4, #4]
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	6023      	str	r3, [r4, #0]
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	f043 0308 	orr.w	r3, r3, #8
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	6923      	ldr	r3, [r4, #16]
 8005faa:	b94b      	cbnz	r3, 8005fc0 <__swsetup_r+0x7c>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb6:	d003      	beq.n	8005fc0 <__swsetup_r+0x7c>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f000 f8a7 	bl	800610e <__smakebuf_r>
 8005fc0:	89a0      	ldrh	r0, [r4, #12]
 8005fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fc6:	f010 0301 	ands.w	r3, r0, #1
 8005fca:	d00a      	beq.n	8005fe2 <__swsetup_r+0x9e>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	6963      	ldr	r3, [r4, #20]
 8005fd2:	425b      	negs	r3, r3
 8005fd4:	61a3      	str	r3, [r4, #24]
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	b943      	cbnz	r3, 8005fec <__swsetup_r+0xa8>
 8005fda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fde:	d1c4      	bne.n	8005f6a <__swsetup_r+0x26>
 8005fe0:	bd38      	pop	{r3, r4, r5, pc}
 8005fe2:	0781      	lsls	r1, r0, #30
 8005fe4:	bf58      	it	pl
 8005fe6:	6963      	ldrpl	r3, [r4, #20]
 8005fe8:	60a3      	str	r3, [r4, #8]
 8005fea:	e7f4      	b.n	8005fd6 <__swsetup_r+0x92>
 8005fec:	2000      	movs	r0, #0
 8005fee:	e7f7      	b.n	8005fe0 <__swsetup_r+0x9c>
 8005ff0:	20000074 	.word	0x20000074

08005ff4 <memmove>:
 8005ff4:	4288      	cmp	r0, r1
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	eb01 0402 	add.w	r4, r1, r2
 8005ffc:	d902      	bls.n	8006004 <memmove+0x10>
 8005ffe:	4284      	cmp	r4, r0
 8006000:	4623      	mov	r3, r4
 8006002:	d807      	bhi.n	8006014 <memmove+0x20>
 8006004:	1e43      	subs	r3, r0, #1
 8006006:	42a1      	cmp	r1, r4
 8006008:	d008      	beq.n	800601c <memmove+0x28>
 800600a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800600e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006012:	e7f8      	b.n	8006006 <memmove+0x12>
 8006014:	4402      	add	r2, r0
 8006016:	4601      	mov	r1, r0
 8006018:	428a      	cmp	r2, r1
 800601a:	d100      	bne.n	800601e <memmove+0x2a>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006026:	e7f7      	b.n	8006018 <memmove+0x24>

08006028 <_sbrk_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d06      	ldr	r5, [pc, #24]	; (8006044 <_sbrk_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fb f9b4 	bl	80013a0 <_sbrk>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_sbrk_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_sbrk_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	2000033c 	.word	0x2000033c

08006048 <memcpy>:
 8006048:	440a      	add	r2, r1
 800604a:	4291      	cmp	r1, r2
 800604c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006050:	d100      	bne.n	8006054 <memcpy+0xc>
 8006052:	4770      	bx	lr
 8006054:	b510      	push	{r4, lr}
 8006056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800605e:	4291      	cmp	r1, r2
 8006060:	d1f9      	bne.n	8006056 <memcpy+0xe>
 8006062:	bd10      	pop	{r4, pc}

08006064 <_realloc_r>:
 8006064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006068:	4680      	mov	r8, r0
 800606a:	4614      	mov	r4, r2
 800606c:	460e      	mov	r6, r1
 800606e:	b921      	cbnz	r1, 800607a <_realloc_r+0x16>
 8006070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006074:	4611      	mov	r1, r2
 8006076:	f7ff b9c1 	b.w	80053fc <_malloc_r>
 800607a:	b92a      	cbnz	r2, 8006088 <_realloc_r+0x24>
 800607c:	f7ff f952 	bl	8005324 <_free_r>
 8006080:	4625      	mov	r5, r4
 8006082:	4628      	mov	r0, r5
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	f000 f8a0 	bl	80061cc <_malloc_usable_size_r>
 800608c:	4284      	cmp	r4, r0
 800608e:	4607      	mov	r7, r0
 8006090:	d802      	bhi.n	8006098 <_realloc_r+0x34>
 8006092:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006096:	d812      	bhi.n	80060be <_realloc_r+0x5a>
 8006098:	4621      	mov	r1, r4
 800609a:	4640      	mov	r0, r8
 800609c:	f7ff f9ae 	bl	80053fc <_malloc_r>
 80060a0:	4605      	mov	r5, r0
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d0ed      	beq.n	8006082 <_realloc_r+0x1e>
 80060a6:	42bc      	cmp	r4, r7
 80060a8:	4622      	mov	r2, r4
 80060aa:	4631      	mov	r1, r6
 80060ac:	bf28      	it	cs
 80060ae:	463a      	movcs	r2, r7
 80060b0:	f7ff ffca 	bl	8006048 <memcpy>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4640      	mov	r0, r8
 80060b8:	f7ff f934 	bl	8005324 <_free_r>
 80060bc:	e7e1      	b.n	8006082 <_realloc_r+0x1e>
 80060be:	4635      	mov	r5, r6
 80060c0:	e7df      	b.n	8006082 <_realloc_r+0x1e>

080060c2 <__swhatbuf_r>:
 80060c2:	b570      	push	{r4, r5, r6, lr}
 80060c4:	460c      	mov	r4, r1
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	2900      	cmp	r1, #0
 80060cc:	b096      	sub	sp, #88	; 0x58
 80060ce:	4615      	mov	r5, r2
 80060d0:	461e      	mov	r6, r3
 80060d2:	da0d      	bge.n	80060f0 <__swhatbuf_r+0x2e>
 80060d4:	89a3      	ldrh	r3, [r4, #12]
 80060d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060da:	f04f 0100 	mov.w	r1, #0
 80060de:	bf0c      	ite	eq
 80060e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060e4:	2340      	movne	r3, #64	; 0x40
 80060e6:	2000      	movs	r0, #0
 80060e8:	6031      	str	r1, [r6, #0]
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	b016      	add	sp, #88	; 0x58
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	466a      	mov	r2, sp
 80060f2:	f000 f849 	bl	8006188 <_fstat_r>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	dbec      	blt.n	80060d4 <__swhatbuf_r+0x12>
 80060fa:	9901      	ldr	r1, [sp, #4]
 80060fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006100:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006104:	4259      	negs	r1, r3
 8006106:	4159      	adcs	r1, r3
 8006108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800610c:	e7eb      	b.n	80060e6 <__swhatbuf_r+0x24>

0800610e <__smakebuf_r>:
 800610e:	898b      	ldrh	r3, [r1, #12]
 8006110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006112:	079d      	lsls	r5, r3, #30
 8006114:	4606      	mov	r6, r0
 8006116:	460c      	mov	r4, r1
 8006118:	d507      	bpl.n	800612a <__smakebuf_r+0x1c>
 800611a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	2301      	movs	r3, #1
 8006124:	6163      	str	r3, [r4, #20]
 8006126:	b002      	add	sp, #8
 8006128:	bd70      	pop	{r4, r5, r6, pc}
 800612a:	ab01      	add	r3, sp, #4
 800612c:	466a      	mov	r2, sp
 800612e:	f7ff ffc8 	bl	80060c2 <__swhatbuf_r>
 8006132:	9900      	ldr	r1, [sp, #0]
 8006134:	4605      	mov	r5, r0
 8006136:	4630      	mov	r0, r6
 8006138:	f7ff f960 	bl	80053fc <_malloc_r>
 800613c:	b948      	cbnz	r0, 8006152 <__smakebuf_r+0x44>
 800613e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006142:	059a      	lsls	r2, r3, #22
 8006144:	d4ef      	bmi.n	8006126 <__smakebuf_r+0x18>
 8006146:	f023 0303 	bic.w	r3, r3, #3
 800614a:	f043 0302 	orr.w	r3, r3, #2
 800614e:	81a3      	strh	r3, [r4, #12]
 8006150:	e7e3      	b.n	800611a <__smakebuf_r+0xc>
 8006152:	89a3      	ldrh	r3, [r4, #12]
 8006154:	6020      	str	r0, [r4, #0]
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	81a3      	strh	r3, [r4, #12]
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	6163      	str	r3, [r4, #20]
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	6120      	str	r0, [r4, #16]
 8006164:	b15b      	cbz	r3, 800617e <__smakebuf_r+0x70>
 8006166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800616a:	4630      	mov	r0, r6
 800616c:	f000 f81e 	bl	80061ac <_isatty_r>
 8006170:	b128      	cbz	r0, 800617e <__smakebuf_r+0x70>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f023 0303 	bic.w	r3, r3, #3
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	431d      	orrs	r5, r3
 8006182:	81a5      	strh	r5, [r4, #12]
 8006184:	e7cf      	b.n	8006126 <__smakebuf_r+0x18>
	...

08006188 <_fstat_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d07      	ldr	r5, [pc, #28]	; (80061a8 <_fstat_r+0x20>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	f7fb f8da 	bl	800134e <_fstat>
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	d102      	bne.n	80061a4 <_fstat_r+0x1c>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	b103      	cbz	r3, 80061a4 <_fstat_r+0x1c>
 80061a2:	6023      	str	r3, [r4, #0]
 80061a4:	bd38      	pop	{r3, r4, r5, pc}
 80061a6:	bf00      	nop
 80061a8:	2000033c 	.word	0x2000033c

080061ac <_isatty_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d06      	ldr	r5, [pc, #24]	; (80061c8 <_isatty_r+0x1c>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fb f8d9 	bl	800136e <_isatty>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_isatty_r+0x1a>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_isatty_r+0x1a>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	2000033c 	.word	0x2000033c

080061cc <_malloc_usable_size_r>:
 80061cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061d0:	1f18      	subs	r0, r3, #4
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfbc      	itt	lt
 80061d6:	580b      	ldrlt	r3, [r1, r0]
 80061d8:	18c0      	addlt	r0, r0, r3
 80061da:	4770      	bx	lr

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
